{"title":"Pengenalan Geospasial dengan Simple Features `sf`","markdown":{"yaml":{"title":"Pengenalan Geospasial dengan Simple Features `sf`","date":"8-17-2023","author":"Gerry Alfa Dito","categories":["Geospatial","R Programming","Data Visualization"],"draft":false,"image":"post-image.jpg"},"headingText":"Pengantar Data Spasial","containsRefs":false,"markdown":"\n\n\nData spasial adalah data yang memberi informasi tentang di mana letak (lokasi) suatu objek. Informasi yang diberikan dapat berupa **lokasi geografis** atau **posisi** objek tertentu di permukaan Bumi. Data Spasial ini dapat berbentuk **titik-titik (points), garis-garis (lines), poligon-poligon (polygons), atau bahkan citra-citra (images)**. Dalam tulisan ini, kita akan hanya akan mengenalkan data spasial sebagai data yang berisi informasi lokasi geografis.\n\nSebagai ilustrasi, Di peta, kita dapat melihat lokasi kota-kota, sungai-sungai, gunung-gunung, dan objek-objek lainnya. Setiap elemen ini mewakili data spasial. Namun, data spasial tidak hanya terbatas pada peta. Setiap informasi yang terhubung dengan suatu tempat tertentu bisa dianggap sebagai data spasial. Hal ini bisa mencakup hal-hal seperti pengukuran suhu di lokasi berbeda, distribusi pohon di hutan, atau jumlah penduduk di berbagai lingkungan.\n\n\nData spasial sangat penting karena membantu kita memahami bagaimana objek-objek tersebar di suatu ruang dan bagaimana interaksi di antara objek-objek tersebut berdasarkan lokasi objek. Dengan menganalisis data spasial, kita dapat mengungkap pola dan hubungan yang mungkin tidak terlihat dari data biasa. Di sinilah statistik spasial berperan, yakni memberikan alat dan teknik untuk menganalisis dan memahami jenis data ini.\n\n\n## Coordinate Reference Systems (CRS)\n\n\nCoordinate Reference System, sering disingkat sebagai CRS, adalah cara untuk menentukan bagaimana koordinat yakni lintang (latitude) dan bujur (longitude) diberikan kepada lokasi objek di permukaan bumi. Kita dapat memandang CRS sebagai **kumpulan aturan matematis** yang memungkinkan kita untuk dengan tepat **mendefinisikan di mana lokasi suatu objek** terletak di **peta** atau dalam ruang geografis.\n\nBumi itu bulat, seperti bola, tetapi **peta** yang digunakan berupa **permukaan datar**. Ketika kita merepresentasikan permukaan Bumi yang melengkung pada peta datar, terjadi sedikit distorsi. CRS membantu kita **mengelola distorsi** ini dan memastikan bahwa peta yang terbentuk mewakili lokasi-lokasi di dunia nyata secara akurat.\n\nCRS mencakup dua komponen utama: datum dan proyeksi. \n\n1. datum adalah sebuah parameter atau sekumpulan parameter yang menentukan posisi\nasal, skala, dan orientasi sistem koordinat.\n2. Proyeksi adalah metode yang digunakan untuk **meratakan permukaan Bumi** ke **dalam peta 2D**. Proyeksi yang berbeda digunakan untuk tujuan yang berbeda, karena setiap proyeksi mengubah permukaan Bumi dengan cara yang unik.\n\n\nAda dua jenis utama datum yaitu:\n\n1. Datum Geografis: Datum geografis mendefinisikan pusat, orientasi, dan skala bentuk elipsoid permukaan Bumi. Ini seperti sistem koordinat yang menempatkan titik-titik di permukaan Bumi. Datum ini membantu menentukan koordinat lintang dan bujur. Jenis-jenis datum Geografis antara lain:\n\na. **WGS84 (World Geodetic System 1984)**: Ini adalah datum yang banyak digunakan untuk sistem GPS dan aplikasi pemetaan. Ini menyediakan kerangka referensi global dan umumnya digunakan untuk navigasi satelit.\nb. **NAD83 (North American Datum 1983)**: Datum ini digunakan di Amerika Utara dan menyediakan kerangka kerja untuk pemetaan dan survei di Amerika Serikat, Kanada, dan Meksiko.\nc. **ETRS89 (European Terrestrial Reference System 1989)**: ETRS89 adalah datum geosentris yang digunakan di Eropa untuk berbagai tujuan pemetaan dan penentuan posisi.\nd. **GDA94 (Geocentric Datum of Australia 1994)**: Datum ini digunakan untuk tujuan pemetaan dan survei di Australia dan wilayah-wilayahnya.\ne. **Tokyo Datum 2000**: Digunakan di Jepang, datum ini menyediakan kerangka referensi untuk pemetaan dan survei di kepulauan Jepang.\nf. **Indian 1975**: Digunakan di India, datum ini berfungsi sebagai referensi untuk pemetaan dan kegiatan geodetik di negara tersebut.\ng. **HARN (High Accuracy Reference Network)**: Ini adalah sekelompok datum yang digunakan di Amerika Serikat untuk meningkatkan akurasi pemetaan dan survei di wilayah-wilayah tertentu.\nh. **Beijing 1954**: Digunakan di Tiongkok, datum ini berfungsi sebagai referensi untuk pemetaan dan pekerjaan geodetik di negara tersebut.\n2. Datum Vertikal: Sementara datum geografis fokus pada permukaan Bumi, datum vertikal digunakan untuk mengukur ketinggian dan kedalaman, terutama dalam hubungannya dengan permukaan laut. Mereka mendefinisikan titik awal untuk mengukur elevasi. Jenis-jenis datum Vertikal antara lain:\n\na. **NGVD29 (National Geodetic Vertical Datum of 1929)**: Datum ini banyak digunakan di Amerika Serikat dan menjadi acuan untuk mengukur ketinggian berdasarkan titik ukur pasang surut tertentu.\nb. **NAVD88 (North American Vertical Datum of 1988)**: Versi yang diperbarui dari NGVD29, NAVD88 adalah datum vertikal standar saat ini di Amerika Utara. Ini menggunakan jaringan titik ukur dan teknologi canggih untuk memberikan pengukuran ketinggian yang akurat.\nc. **EGM96 (Earth Gravitational Model 1996)**: Meskipun bukan datum vertikal tradisional, EGM96 adalah model matematika yang mendefinisikan medan gravitasi Bumi. Sering digunakan bersama dengan model geoid untuk menentukan ketinggian ortometrik.\nd. **AHD (Australian Height Datum)**: Digunakan di Australia, AHD memberikan acuan untuk mengukur ketinggian di berbagai lanskap yang beragam di negara tersebut.\nc. **GEOID12B**: Model geoid yang dikembangkan oleh National Geodetic Survey di Amerika Serikat untuk memberikan ketinggian ortometrik yang tepat menggunakan EGM96.\nd. **CVD2014 (Canadian Vertical Datum 2014)**: Datum ini digunakan di Kanada dan memberikan referensi yang diperbarui untuk pengukuran ketinggian.\n\n\n\nTransformasi antar datum dalam CRS ini dapat menggunakan PROJ4 dan WKT-4.\n\n\n## Objek Geometri data spasial\n\n| type         | description |    \n|--------------|-----------|\n| POINT | single point geometry     |\n| MULTIPOINT     | set of points  |\n| LINESTRING | single linestring (two or more points connected by straight\nlines)     |\n|MULTILINESTRING    | set of linestrings  |\n| POLYGON | exterior ring with zero or more inner rings, denoting holes\n set of polygons  |\n| MULTIPOLYGON    | set of points  |  \n| GEOMETRYCOLLECTION    | set of the geometries above  |\n \n \n \n \n \n\n\n\n\n\n\n\n\n\n![](Objek Geometri.png)\n\n\n\n\n## Data \n\nData yang digunakan untuk praktikum kali ini adalah  \n\n1. Cholera Death\n2. Peta Administratif tingkat kabupaten/kota seluruh indonesia (Update 2020)\n3. Jumlah tenaga kesehatan masyarakat di Jawa Barat Tahun 2016-2021\n\nKetiga dataset ini dapat didownload melalui link berikut\n[Download Dataset](https://drive.google.com/file/d/13FkcOs2LSixpE61a55RVniUb6Bq4Ya-j/view?usp=sharing)\n\nSilahkan extract zip terlebih dahulu sebelum menggunakan data-data tersebut.\n\n\n### Cholera Death\n\n\nJohn Snow produced a famous map in 1854 showing the deaths caused by a cholera outbreak in Soho, London, and the locations of water pumps in the area. By doing this he found there was a significant clustering of the deaths around a certain pump â€“ and removing the handle of the pump stopped the outbreak.\n\n\n\n\n## Package\n\nSilahkan install package berikut dari github.\n\n**Catatan:** jika saat menjalankan sintaks ada output\n\n>These packages have more recent versions available.\nIt is recommended to update all of them.\nWhich would you like to update?\n* 1: All                           \n* 2: CRAN packages only            \n* 3: None                          \n\n\nSilahkan pilih None\n\n\n\n```{r eval=FALSE}\nremotes::install_github(\"yutannihilation/ggsflabel\")\n```\n\nSilahkan install package berikut tanpa perlu dipanggil\n\n```{r eval=FALSE}\ninstall.packages(\"viridis\")\ninstall.packages(\"mapview\")\n```\n\n\n```{r}\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(ggspatial)\n```\n\n\n## Data Spasial dalam R\n\nDi dalam R terdapat package-package yang tergabung dalam ekosistem untu menangani data spasial. Secara umum, package dasar yang dapat menangani data spasial adalah package `sp` dan `sf`. Dalam ilustrasi kali ini kita akan berfokus pada penggunaan package `sf`.\n\n\n### Package `sf`\n\nPackage `sf` dimaksudkan untuk menggantikan package R `sp`, `rgeos` dan bagian vektor dari `rgdal`, package R `sf` (Pebesma 2018) dikembangkan untuk memindahkan analisis data spasial dalam R yang lebih dekat dengan pendekatan berbasis standar dalam industri dan proyek open-source, untuk membangun versi yang lebih modern dari software geospasial open-source, dan untuk memungkinkan integrasi software spasial R dengan `tidyverse` (Wickham dkk. 2019).\n\n\nUntuk melakukannya, package R `sf` menyediakan akses **simple features** (Herring et al. 2011), secara native, ke R. Package ini dapat dihubungkan ke beberapa package `tidyverse`, khususnya ke `ggplot2`, `dplyr`, dan `tidyr`. Package ini dapat membaca dan menyimpan data melalui `GDAL`, menjalankan operasi geometri menggunakan `GEOS` (untuk koordinat yang diproyeksikan) atau `s2geometry` (untuk koordinat ellipsoidal), dan menjalankan transformasi koordinat atau konversi menggunakan `PROJ`. Library C++ eksternal dihubungkan dengan package R `Rcpp` (Eddelbuettel 2013).\n\n\nPaket sf merepresentasikan kumpulan **simple features** dalam objek `sf`, sebuah sub-kelas dari `data.frame` atau `tibble`. Objek `sf` berisi setidaknya satu **geometri list-column** dari kelas `sfc`, yang mana untuk setiap elemennya berisi geometri sebagai objek R dari kelas `sfg`. **Geometri list-column** bertindak sebagai sebuah variabel dalam `data.frame` atau `tibble`, tetapi memiliki struktur yang lebih kompleks daripada vektor dasar seperti variabel numerik atau karakter. \n\nSebuah objek sf memiliki metadata sebagai berikut:\n- nama kolom geometri (aktif), yang disimpan dalam atribut `sf_column`\n- untuk setiap variabel non-geometri, hubungan atribut-geometri yang disimpan dalam atribut `agr`\n\nSuatu `sfc` **geometri list-column** diekstrak dari objek `sf` dengan `st_geometry` dan memiliki metadata sebagai berikut:\n- sistem referensi koordinat yang disimpan dalam atribut `crs`\n- kotak pembatas yang disimpan dalam atribut `bbox`\n- presisi disimpan dalam atribut presisi\n- jumlah geometri kosong yang disimpan dalam atribut `n_empty`\n\nAtribut-atribut ini paling mudah diakses atau diatur dengan menggunakan fungsi-fungsi seperti `st_bbox`, `st_crs`, `st_set_crs`, `st_agr`, `st_set_agr`, `st_precision`, dan `st_set_precision`.Kolom geometri pada objek `sf` dapat diatur atau diganti dengan menggunakan `st_geometry<-` atau `st_set_geometry`. \n\n## Data Spasial dengan geometri titik\n\n### Import data spasial\n\nData spasial dapat berupa ekstensi `.shp` atau `dbf`. Untuk mengimport data spasial bisa menggunakan fungsi `st_read` dari package `sf`.\n\n\n```{r}\nCholeraDeaths <- st_read(dsn = \"SnowGIS_SHP\",layer = \"Cholera_Deaths\")\n```\n\nargumen `layer` pada sintaks diatas adalah nama file `.shp` atau `.dbf` yang akan diimport. Sementara itu, `dsn` adalah nama folder tempat file `.shp` atau `.dbf` berada. Selain dengan cara diatas, cara lain untuk import data spasial menggunakan sintaks `st_read` langsung menuliskan direktori atau nama file `.shp` atau `.dbf`. Berikut ilustrasinya.\n\n\n```{r}\nCholeraDeaths <- st_read(dsn = \"SnowGIS_SHP/Cholera_Deaths.shp\")\n```\n\n\nSetelah proses import selesai, maka akan tampil beberapa informasi tentang data spasial yang diimport seperti\n\n* 250 Features dan 2 fields berarti terdapat 250 objek spasial dan 2 kolom data yang bersesuaian dengan objek spasial tersebut.\n* **Tipe Geometri** pada data ini adalah `POINT` yang berarti bahwa data spasial yang diimport berupa titik-titik amatan yang tersebar dalam ruang spasial.\n* **Bounding box** yang merupakan batas minimum dan maximum di latitude (sumbu $x$) atau longitude (sumbu $y$).\n* CRS yang digunakan dalam data ini adalah **British National Grid**\n\n\nKemudian jika kita panggil objek `CholeraDeaths` akan muncul overview objek-objek spasial (baris) sebagai berikut:\n\n\n```{r}\nCholeraDeaths\n```\n\n### Visualisasi data spasial\n\n#### Visualisasi statis\n\nKemudian kita bisa mevisualisasikan data spasial diatas dengan bantuan package `ggplot2`, secara khusus dengan memanfaatkan fungsi `geom_sf`.\n\n```{r}\nggplot(data = CholeraDeaths)+\n  geom_sf()+\n  #mengubah tema\n  theme_bw()\n```\n\n\nGrafik diatas sulit diinterpretasikan karena hanya berupa titik-titik spasial saja. Kita dapat menambahkan peta yang bersesuaian dengan menambahkan fungsi `annotation_map_tile` dari package `ggspatial`. Fungsi `annotation_map_tile` mengcapture peta yang berasal dari OpenStreetMap sesuai dengan posisi objek spasial. Kita dapat mengontrol tingkat ``zoom``, serta `type`-nya. \n\n`\n\n```{r}\nggplot(CholeraDeaths) + \n  annotation_map_tile(type = \"osm\", zoomin = 0) + \n  geom_sf(aes(size = Count), alpha = 0.7)+\n  theme_bw()\n```\n\n\nHal menarik lain yang terlihat dari map diatas adalah ada beberapa titik yang masuk dalam map tiles. Hal ini dikarenakan adanya perbedaan CRS pada data Cholera Death dan map tiles yang berasal dari **Open Street Map**. CRS pada data Cholera Death adalah OSGB36 / British National Grid. Semetara itu,  CRS pada **Open Street Map** atau maps yang lain adalah WGS84 atau sering juga dikenal sebagai EPSG:3857. Fungsi `st_crs()` akan menerjemahkan dari kode EPSG ke string PROJ.4 dan WKT. Berikut sintaks untuk menampilkan string PROJ.4 dan WKT\n\n\n\n```{r}\nst_crs(3857)$proj4string\n```\n\n\n```{r}\nst_crs(3857)$wkt\n```\n\n\n\nJika kita bandingkan dengan  PROJ.4 dan WKT dari `CholeraDeaths`\n\n```{r}\nst_crs(CholeraDeaths)$proj4string\n```\n\n```{r}\nst_crs(CholeraDeaths)$wkt\n```\n\n\n\n\n\nKemudian dengan `st_transform` kita melakukan proyeksi (transformasi) data `CholeraDeaths` dari CRS OSGB36 ke EPSG:3857\n\n\n```{r}\ncholera_latlong <- CholeraDeaths %>%\n  st_transform(3857)\n```\n\nkarena WKT agak sulit untuk dibandingkan kita menggunakan Proj4 saja\n\n\n```{r}\nst_crs(cholera_latlong)$proj4string\nst_crs(3857)$proj4string\n```\n\nPROJ4 untuk data `CholeraDeaths` hasil transformasi sudah sama dengan  EPSG:3857.\n\n\nKemudian jika kita buatkan kembali map, maka hasilnya adalah\n\n \n```{r}\nggplot(cholera_latlong) + \n  annotation_map_tile(type = \"osm\", zoomin = 0) + \n  geom_sf(aes(size = Count),color=\"#0288D1\", alpha = 0.7)+\n  theme_bw()\n```\n\n\n#### Visualisasi Interaktif\n\n\nVisualisasi spasial interaktif bisa dilakukan dengan menggunakan fungsi `mapview` package `mapview`.\n\n\n```{r}\ncholera_latlong %>% \n  mapview::mapview(zcol = \"Count\")\n```\n\n\nargumen `zcol` digunakan untuk menampilkan informasi tertentu dalam bentuk warna.\n\n\n\n## Data Spasial dengan geometri poligon\n\nUntuk ilustrasi data spasial yang berbentuk poligon, kita akan mencoba melakukan visualisasi spasial Jumlah tenaga kesehatan masyarakat setiap Kabupaten/kota di Jawa Barat tahun 2021.\n\n\n### Import data spasial\n\n\n```{r}\nkab_indo <- st_read(\"Admin2Kabupaten/idn_admbnda_adm2_bps_20200401.shp\")\n```\n\n\nSetelah proses import selesai, maka akan tampil beberapa informasi tentang data spasial yang diimport seperti\n\n* 522 Features dan 14 fields berarti terdapat 522 objek spasial (poligon) dan 14 kolom data yang bersesuaian dengan objek spasial tersebut. Dalam kasus ini banyaknya poligon adalah sebanyak kabupaten/kota di seluruh indonesia.\n* **Tipe Geometri** pada data ini adalah `MULTIPOLYGON`.\n* **Bounding box** yang merupakan batas minimum dan maximum di latitude (sumbu $x$) atau longitude (sumbu $y$).\n* CRS yang digunakan dalam data ini adalah **WGS-84**\n\n\n\n```{r}\nkab_indo\n```\n\n\n### Import data tabular\n\n\n\n```{r}\njum_nakes <- read_csv(\"jml_tenaga_kesehatan_msyrkt__kabupatenkota.csv\")\nglimpse(jum_nakes)\n```\n\nData tabular yang kita import memliki informasi lebih dari satu tahun. Sehingga kita perlu `filter` terlebih dahulu untuk Tahun 2021.\n\n```{r}\njum_nakes %>% \n  count(tahun)\n```\n\nBerikut ilustrasi filternya:\n\n\n```{r}\njum_nakes2021 <- jum_nakes %>% \n                    filter(tahun==2021) %>%\n                    select(nama_kabupaten_kota,jumlah_nakesmas)\njum_nakes2021\n```\n\n### Visualisasi Data Spasial\n\n#### Visualisasi Statis \n\nSama seperti sebelumnya, visualisasi data spasial juga menggunakan package `ggplot2` dan fungsi `geom_sf`.\n\n\n```{r}\nggplot(data = kab_indo)+\n  geom_sf()+\n  theme_bw()\n```\n\nHasil visualisasi diatas menujukkan peta Indonesia yang sudah terbagi menjadi poligon-poligon berdasarkan kabupaten/kota. \n\nUntuk mendapatkan hanya provinsi Jawa Barat saja, maka kita bisa menggunakan fungsi `filter` dari package `dplyr` untuk menyaring kolom `ADM1_EN` yang berisi nama-nama provinsi di Indoneisa. \n\n\n\n```{r}\njabar_kabkot <- kab_indo %>%\n                    filter(ADM1_EN==\"Jawa Barat\")\njabar_kabkot\n```\n\n\nKemudian, peta Jawa Barat bisa kita dapatkan\n\n\n```{r}\njabar_kabkot %>% \n  ggplot()+\n  geom_sf()+\n  \n  ggsflabel::geom_sf_label_repel(aes(label=str_wrap(ADM2_EN,width = 1)),size=1.75)+\n  theme_bw()+\n  theme(axis.title = element_blank())\n```\n\n* Fungsi `geom_sf_label_repel` dari package `ggsflabel` berguna untuk memberikan label-label kabupaten/kota. Karena ada kata `repel` difungsi tersebut, menyebabkan label yang dihasilkan tidak akan tumpang tindih. Label yang berpotensi tumpang-tindih satu sama lain akan digeser kemudian diberi garis yang menandakan asal dari label tersebut.\n* Fungsi `str_wrap` digunakan untuk memindahkan kata ke baris baru jika kata-kata tersebut terdiri dari dua kata seperti `\"Kota Bogor\"`.\n\n\n\n\nkita juga bisa menambahkan peta \"asli\" dari **OpenStreetMap** dengan fungsi `annotation_map_tile`.\n\n\n```{r}\njabar_kabkot %>% \n  ggplot()+\n    annotation_map_tile(type = \"osm\", zoomin = 0)+\n    geom_sf()+\n    ggsflabel::geom_sf_label_repel(aes(label=str_wrap(ADM2_EN,width = 1)),size=1.75)+\n    theme_bw()\n```\n\n\n\n\nKemudian, langkah selanjutnya kita akan memasukan informasi **jumlah tenaga kesehatan** tahun 2021 ke dalam peta diatas. Pertama kita harus memastikan bahwa nama-nama kabupaten/kota di data **jumlah tenaga kesehatan** dan di dalam data spasial kita (yang diimport dari `.shp`) itu sama. Berikut adalah hasilnya\n\n\n\n```{r}\njum_nakes2021 %>% count(nama_kabupaten_kota)\nkab_indo %>% as_tibble() %>% count(ADM2_EN)\n```\n\nBerdasarkan output tersebut, dapat disimpulkan bahwa nama kabupaten/kota dari data spasial dan data **jumlah tenaga kesehatan** tidak sama, sehingga kita perlu memodifikasi terlebih dahulu supaya sama. Dalam kasus ini kita akan memodifikasi nama kabupaten/kota dari data **jumlah tenaga kesehatan**.\n\n\n```{r}\njum_nakes2021fin <- jum_nakes2021 %>% \n                    mutate(nama_kabupaten_kota= nama_kabupaten_kota %>% \n                             #dibuang kata \"KABUPATEN\"\n                             str_remove(pattern = \"KABUPATEN \") %>% \n                             #diubah menjadi huruf kapital setiap awal kata\n                             str_to_title()\n                           )\njum_nakes2021fin\n```\n\nSetelah nama kabupaten/kota sama, langkah selanjutnya adalah menggabungkan data spasial dan data **jumlah tenaga kesehatan**. Proses penggabungan ini bisa menggunakan `*_join` dari package `dplyr`. Dalam kasus ini kita coba menggunakan `full_join` untuk mengidentifikasi apakah nama kabupaten/kota di kedua sumber sudah sama.\n\n\n```{r}\njabar_nakes <- jabar_kabkot %>% \n                  full_join(y = jum_nakes2021fin,\n                            by = join_by(ADM2_EN==nama_kabupaten_kota))\njabar_nakes\n```\n\nKarena banyaknya `features` (baris) sudah sama seperti sebelum digabung, maka hasil penggabungan sudah sesuai. Kemudian kita akan langsung membuat visualisasinya\n\n\n```{r}\np0 <- jabar_nakes %>% \n  ggplot()+\n  geom_sf(aes(fill=jumlah_nakesmas))+\n  ggsflabel::geom_sf_label_repel(aes(label=str_wrap(ADM2_EN,width = 1)),size=1.75)+\n  scale_fill_stepsn(colours = viridis::magma(n = 6,direction = -1),breaks=seq(0,300,50))+\n#colours =viridis::magma(n=10,direction = -1 ),nbreaks=5) +\n  theme_bw()+\n  theme(axis.title = element_blank())\np0\n```\n\n* Argumen `fill=jumlah_nakesmas` dalam `geom_sf(aes(fill=jumlah_nakesmas))` menunjukkan bahwa informasi **banyaknya tenaga kesehatan masyarakat** akan ditampilkan dalam bentuk warna-warna.\n* fungsi `scale_fill_stepsn` akan memberi warna pada angka-angka pada yang ada dalam kolom `jumlah_nakesmas`. Sebelumnya angka-angka tersebut harus kita ubah ke dalam interval-interval. Dalam kasus ini intervalnya adalah\n\n```{r}\nseq(0,300,50)\n```\n\n* fungsi `magma()` dari package `viridis` merupakan fungsi untuk memanggil **color** pallete. Untuk keterangan lebih lanjut silahkan help dari fungsi magma `help(viridis::magma)`.\n* Argumen `axis.title = element_blank()` dari fungsi `theme` berarti kita ingin menghilangkan judul kolom dari plot.\n\n\nkita juga bisa menambahkan peta \"asli\" dari **OpenStreetMap** dengan fungsi `annotation_map_tile`.\n\n\n```{r}\np1 <- jabar_nakes %>% \n  ggplot()+\n  annotation_map_tile(type = \"osm\", zoomin = 0)+\n  geom_sf(aes(fill=jumlah_nakesmas))+\n  ggsflabel::geom_sf_label_repel(aes(label=str_wrap(ADM2_EN,width = 1)),size=1.75)+\n  scale_fill_stepsn(colours = viridis::magma(n = 6,direction = -1),breaks=seq(0,300,50))+\n#colours =viridis::magma(n=10,direction = -1 ),nbreaks=5) +\n  theme_bw()+\n  theme(axis.title = element_blank())\np1\n```\n\n\n#### Visualisasi Interaktif\n\n\n\n\n```{r}\njabar_nakes %>% \n  mapview::mapview(zcol=\"jumlah_nakesmas\",\n                   at = seq(0,300,50),\n                   col.regions=viridis::magma(n = 7,direction = -1))\n```\n\n\n* argumen `zcol` digunakan untuk menampilkan informasi tertentu dalam bentuk warna.\n* `at` digunakan untuk membagi angka-angka yang yang akan dimasukan ke argumen `zcol` ke dalam beberapa interval.\n\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n## Pengantar Data Spasial\n\nData spasial adalah data yang memberi informasi tentang di mana letak (lokasi) suatu objek. Informasi yang diberikan dapat berupa **lokasi geografis** atau **posisi** objek tertentu di permukaan Bumi. Data Spasial ini dapat berbentuk **titik-titik (points), garis-garis (lines), poligon-poligon (polygons), atau bahkan citra-citra (images)**. Dalam tulisan ini, kita akan hanya akan mengenalkan data spasial sebagai data yang berisi informasi lokasi geografis.\n\nSebagai ilustrasi, Di peta, kita dapat melihat lokasi kota-kota, sungai-sungai, gunung-gunung, dan objek-objek lainnya. Setiap elemen ini mewakili data spasial. Namun, data spasial tidak hanya terbatas pada peta. Setiap informasi yang terhubung dengan suatu tempat tertentu bisa dianggap sebagai data spasial. Hal ini bisa mencakup hal-hal seperti pengukuran suhu di lokasi berbeda, distribusi pohon di hutan, atau jumlah penduduk di berbagai lingkungan.\n\n\nData spasial sangat penting karena membantu kita memahami bagaimana objek-objek tersebar di suatu ruang dan bagaimana interaksi di antara objek-objek tersebut berdasarkan lokasi objek. Dengan menganalisis data spasial, kita dapat mengungkap pola dan hubungan yang mungkin tidak terlihat dari data biasa. Di sinilah statistik spasial berperan, yakni memberikan alat dan teknik untuk menganalisis dan memahami jenis data ini.\n\n\n## Coordinate Reference Systems (CRS)\n\n\nCoordinate Reference System, sering disingkat sebagai CRS, adalah cara untuk menentukan bagaimana koordinat yakni lintang (latitude) dan bujur (longitude) diberikan kepada lokasi objek di permukaan bumi. Kita dapat memandang CRS sebagai **kumpulan aturan matematis** yang memungkinkan kita untuk dengan tepat **mendefinisikan di mana lokasi suatu objek** terletak di **peta** atau dalam ruang geografis.\n\nBumi itu bulat, seperti bola, tetapi **peta** yang digunakan berupa **permukaan datar**. Ketika kita merepresentasikan permukaan Bumi yang melengkung pada peta datar, terjadi sedikit distorsi. CRS membantu kita **mengelola distorsi** ini dan memastikan bahwa peta yang terbentuk mewakili lokasi-lokasi di dunia nyata secara akurat.\n\nCRS mencakup dua komponen utama: datum dan proyeksi. \n\n1. datum adalah sebuah parameter atau sekumpulan parameter yang menentukan posisi\nasal, skala, dan orientasi sistem koordinat.\n2. Proyeksi adalah metode yang digunakan untuk **meratakan permukaan Bumi** ke **dalam peta 2D**. Proyeksi yang berbeda digunakan untuk tujuan yang berbeda, karena setiap proyeksi mengubah permukaan Bumi dengan cara yang unik.\n\n\nAda dua jenis utama datum yaitu:\n\n1. Datum Geografis: Datum geografis mendefinisikan pusat, orientasi, dan skala bentuk elipsoid permukaan Bumi. Ini seperti sistem koordinat yang menempatkan titik-titik di permukaan Bumi. Datum ini membantu menentukan koordinat lintang dan bujur. Jenis-jenis datum Geografis antara lain:\n\na. **WGS84 (World Geodetic System 1984)**: Ini adalah datum yang banyak digunakan untuk sistem GPS dan aplikasi pemetaan. Ini menyediakan kerangka referensi global dan umumnya digunakan untuk navigasi satelit.\nb. **NAD83 (North American Datum 1983)**: Datum ini digunakan di Amerika Utara dan menyediakan kerangka kerja untuk pemetaan dan survei di Amerika Serikat, Kanada, dan Meksiko.\nc. **ETRS89 (European Terrestrial Reference System 1989)**: ETRS89 adalah datum geosentris yang digunakan di Eropa untuk berbagai tujuan pemetaan dan penentuan posisi.\nd. **GDA94 (Geocentric Datum of Australia 1994)**: Datum ini digunakan untuk tujuan pemetaan dan survei di Australia dan wilayah-wilayahnya.\ne. **Tokyo Datum 2000**: Digunakan di Jepang, datum ini menyediakan kerangka referensi untuk pemetaan dan survei di kepulauan Jepang.\nf. **Indian 1975**: Digunakan di India, datum ini berfungsi sebagai referensi untuk pemetaan dan kegiatan geodetik di negara tersebut.\ng. **HARN (High Accuracy Reference Network)**: Ini adalah sekelompok datum yang digunakan di Amerika Serikat untuk meningkatkan akurasi pemetaan dan survei di wilayah-wilayah tertentu.\nh. **Beijing 1954**: Digunakan di Tiongkok, datum ini berfungsi sebagai referensi untuk pemetaan dan pekerjaan geodetik di negara tersebut.\n2. Datum Vertikal: Sementara datum geografis fokus pada permukaan Bumi, datum vertikal digunakan untuk mengukur ketinggian dan kedalaman, terutama dalam hubungannya dengan permukaan laut. Mereka mendefinisikan titik awal untuk mengukur elevasi. Jenis-jenis datum Vertikal antara lain:\n\na. **NGVD29 (National Geodetic Vertical Datum of 1929)**: Datum ini banyak digunakan di Amerika Serikat dan menjadi acuan untuk mengukur ketinggian berdasarkan titik ukur pasang surut tertentu.\nb. **NAVD88 (North American Vertical Datum of 1988)**: Versi yang diperbarui dari NGVD29, NAVD88 adalah datum vertikal standar saat ini di Amerika Utara. Ini menggunakan jaringan titik ukur dan teknologi canggih untuk memberikan pengukuran ketinggian yang akurat.\nc. **EGM96 (Earth Gravitational Model 1996)**: Meskipun bukan datum vertikal tradisional, EGM96 adalah model matematika yang mendefinisikan medan gravitasi Bumi. Sering digunakan bersama dengan model geoid untuk menentukan ketinggian ortometrik.\nd. **AHD (Australian Height Datum)**: Digunakan di Australia, AHD memberikan acuan untuk mengukur ketinggian di berbagai lanskap yang beragam di negara tersebut.\nc. **GEOID12B**: Model geoid yang dikembangkan oleh National Geodetic Survey di Amerika Serikat untuk memberikan ketinggian ortometrik yang tepat menggunakan EGM96.\nd. **CVD2014 (Canadian Vertical Datum 2014)**: Datum ini digunakan di Kanada dan memberikan referensi yang diperbarui untuk pengukuran ketinggian.\n\n\n\nTransformasi antar datum dalam CRS ini dapat menggunakan PROJ4 dan WKT-4.\n\n\n## Objek Geometri data spasial\n\n| type         | description |    \n|--------------|-----------|\n| POINT | single point geometry     |\n| MULTIPOINT     | set of points  |\n| LINESTRING | single linestring (two or more points connected by straight\nlines)     |\n|MULTILINESTRING    | set of linestrings  |\n| POLYGON | exterior ring with zero or more inner rings, denoting holes\n set of polygons  |\n| MULTIPOLYGON    | set of points  |  \n| GEOMETRYCOLLECTION    | set of the geometries above  |\n \n \n \n \n \n\n\n\n\n\n\n\n\n\n![](Objek Geometri.png)\n\n\n\n\n## Data \n\nData yang digunakan untuk praktikum kali ini adalah  \n\n1. Cholera Death\n2. Peta Administratif tingkat kabupaten/kota seluruh indonesia (Update 2020)\n3. Jumlah tenaga kesehatan masyarakat di Jawa Barat Tahun 2016-2021\n\nKetiga dataset ini dapat didownload melalui link berikut\n[Download Dataset](https://drive.google.com/file/d/13FkcOs2LSixpE61a55RVniUb6Bq4Ya-j/view?usp=sharing)\n\nSilahkan extract zip terlebih dahulu sebelum menggunakan data-data tersebut.\n\n\n### Cholera Death\n\n\nJohn Snow produced a famous map in 1854 showing the deaths caused by a cholera outbreak in Soho, London, and the locations of water pumps in the area. By doing this he found there was a significant clustering of the deaths around a certain pump â€“ and removing the handle of the pump stopped the outbreak.\n\n\n\n\n## Package\n\nSilahkan install package berikut dari github.\n\n**Catatan:** jika saat menjalankan sintaks ada output\n\n>These packages have more recent versions available.\nIt is recommended to update all of them.\nWhich would you like to update?\n* 1: All                           \n* 2: CRAN packages only            \n* 3: None                          \n\n\nSilahkan pilih None\n\n\n\n```{r eval=FALSE}\nremotes::install_github(\"yutannihilation/ggsflabel\")\n```\n\nSilahkan install package berikut tanpa perlu dipanggil\n\n```{r eval=FALSE}\ninstall.packages(\"viridis\")\ninstall.packages(\"mapview\")\n```\n\n\n```{r}\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(ggspatial)\n```\n\n\n## Data Spasial dalam R\n\nDi dalam R terdapat package-package yang tergabung dalam ekosistem untu menangani data spasial. Secara umum, package dasar yang dapat menangani data spasial adalah package `sp` dan `sf`. Dalam ilustrasi kali ini kita akan berfokus pada penggunaan package `sf`.\n\n\n### Package `sf`\n\nPackage `sf` dimaksudkan untuk menggantikan package R `sp`, `rgeos` dan bagian vektor dari `rgdal`, package R `sf` (Pebesma 2018) dikembangkan untuk memindahkan analisis data spasial dalam R yang lebih dekat dengan pendekatan berbasis standar dalam industri dan proyek open-source, untuk membangun versi yang lebih modern dari software geospasial open-source, dan untuk memungkinkan integrasi software spasial R dengan `tidyverse` (Wickham dkk. 2019).\n\n\nUntuk melakukannya, package R `sf` menyediakan akses **simple features** (Herring et al. 2011), secara native, ke R. Package ini dapat dihubungkan ke beberapa package `tidyverse`, khususnya ke `ggplot2`, `dplyr`, dan `tidyr`. Package ini dapat membaca dan menyimpan data melalui `GDAL`, menjalankan operasi geometri menggunakan `GEOS` (untuk koordinat yang diproyeksikan) atau `s2geometry` (untuk koordinat ellipsoidal), dan menjalankan transformasi koordinat atau konversi menggunakan `PROJ`. Library C++ eksternal dihubungkan dengan package R `Rcpp` (Eddelbuettel 2013).\n\n\nPaket sf merepresentasikan kumpulan **simple features** dalam objek `sf`, sebuah sub-kelas dari `data.frame` atau `tibble`. Objek `sf` berisi setidaknya satu **geometri list-column** dari kelas `sfc`, yang mana untuk setiap elemennya berisi geometri sebagai objek R dari kelas `sfg`. **Geometri list-column** bertindak sebagai sebuah variabel dalam `data.frame` atau `tibble`, tetapi memiliki struktur yang lebih kompleks daripada vektor dasar seperti variabel numerik atau karakter. \n\nSebuah objek sf memiliki metadata sebagai berikut:\n- nama kolom geometri (aktif), yang disimpan dalam atribut `sf_column`\n- untuk setiap variabel non-geometri, hubungan atribut-geometri yang disimpan dalam atribut `agr`\n\nSuatu `sfc` **geometri list-column** diekstrak dari objek `sf` dengan `st_geometry` dan memiliki metadata sebagai berikut:\n- sistem referensi koordinat yang disimpan dalam atribut `crs`\n- kotak pembatas yang disimpan dalam atribut `bbox`\n- presisi disimpan dalam atribut presisi\n- jumlah geometri kosong yang disimpan dalam atribut `n_empty`\n\nAtribut-atribut ini paling mudah diakses atau diatur dengan menggunakan fungsi-fungsi seperti `st_bbox`, `st_crs`, `st_set_crs`, `st_agr`, `st_set_agr`, `st_precision`, dan `st_set_precision`.Kolom geometri pada objek `sf` dapat diatur atau diganti dengan menggunakan `st_geometry<-` atau `st_set_geometry`. \n\n## Data Spasial dengan geometri titik\n\n### Import data spasial\n\nData spasial dapat berupa ekstensi `.shp` atau `dbf`. Untuk mengimport data spasial bisa menggunakan fungsi `st_read` dari package `sf`.\n\n\n```{r}\nCholeraDeaths <- st_read(dsn = \"SnowGIS_SHP\",layer = \"Cholera_Deaths\")\n```\n\nargumen `layer` pada sintaks diatas adalah nama file `.shp` atau `.dbf` yang akan diimport. Sementara itu, `dsn` adalah nama folder tempat file `.shp` atau `.dbf` berada. Selain dengan cara diatas, cara lain untuk import data spasial menggunakan sintaks `st_read` langsung menuliskan direktori atau nama file `.shp` atau `.dbf`. Berikut ilustrasinya.\n\n\n```{r}\nCholeraDeaths <- st_read(dsn = \"SnowGIS_SHP/Cholera_Deaths.shp\")\n```\n\n\nSetelah proses import selesai, maka akan tampil beberapa informasi tentang data spasial yang diimport seperti\n\n* 250 Features dan 2 fields berarti terdapat 250 objek spasial dan 2 kolom data yang bersesuaian dengan objek spasial tersebut.\n* **Tipe Geometri** pada data ini adalah `POINT` yang berarti bahwa data spasial yang diimport berupa titik-titik amatan yang tersebar dalam ruang spasial.\n* **Bounding box** yang merupakan batas minimum dan maximum di latitude (sumbu $x$) atau longitude (sumbu $y$).\n* CRS yang digunakan dalam data ini adalah **British National Grid**\n\n\nKemudian jika kita panggil objek `CholeraDeaths` akan muncul overview objek-objek spasial (baris) sebagai berikut:\n\n\n```{r}\nCholeraDeaths\n```\n\n### Visualisasi data spasial\n\n#### Visualisasi statis\n\nKemudian kita bisa mevisualisasikan data spasial diatas dengan bantuan package `ggplot2`, secara khusus dengan memanfaatkan fungsi `geom_sf`.\n\n```{r}\nggplot(data = CholeraDeaths)+\n  geom_sf()+\n  #mengubah tema\n  theme_bw()\n```\n\n\nGrafik diatas sulit diinterpretasikan karena hanya berupa titik-titik spasial saja. Kita dapat menambahkan peta yang bersesuaian dengan menambahkan fungsi `annotation_map_tile` dari package `ggspatial`. Fungsi `annotation_map_tile` mengcapture peta yang berasal dari OpenStreetMap sesuai dengan posisi objek spasial. Kita dapat mengontrol tingkat ``zoom``, serta `type`-nya. \n\n`\n\n```{r}\nggplot(CholeraDeaths) + \n  annotation_map_tile(type = \"osm\", zoomin = 0) + \n  geom_sf(aes(size = Count), alpha = 0.7)+\n  theme_bw()\n```\n\n\nHal menarik lain yang terlihat dari map diatas adalah ada beberapa titik yang masuk dalam map tiles. Hal ini dikarenakan adanya perbedaan CRS pada data Cholera Death dan map tiles yang berasal dari **Open Street Map**. CRS pada data Cholera Death adalah OSGB36 / British National Grid. Semetara itu,  CRS pada **Open Street Map** atau maps yang lain adalah WGS84 atau sering juga dikenal sebagai EPSG:3857. Fungsi `st_crs()` akan menerjemahkan dari kode EPSG ke string PROJ.4 dan WKT. Berikut sintaks untuk menampilkan string PROJ.4 dan WKT\n\n\n\n```{r}\nst_crs(3857)$proj4string\n```\n\n\n```{r}\nst_crs(3857)$wkt\n```\n\n\n\nJika kita bandingkan dengan  PROJ.4 dan WKT dari `CholeraDeaths`\n\n```{r}\nst_crs(CholeraDeaths)$proj4string\n```\n\n```{r}\nst_crs(CholeraDeaths)$wkt\n```\n\n\n\n\n\nKemudian dengan `st_transform` kita melakukan proyeksi (transformasi) data `CholeraDeaths` dari CRS OSGB36 ke EPSG:3857\n\n\n```{r}\ncholera_latlong <- CholeraDeaths %>%\n  st_transform(3857)\n```\n\nkarena WKT agak sulit untuk dibandingkan kita menggunakan Proj4 saja\n\n\n```{r}\nst_crs(cholera_latlong)$proj4string\nst_crs(3857)$proj4string\n```\n\nPROJ4 untuk data `CholeraDeaths` hasil transformasi sudah sama dengan  EPSG:3857.\n\n\nKemudian jika kita buatkan kembali map, maka hasilnya adalah\n\n \n```{r}\nggplot(cholera_latlong) + \n  annotation_map_tile(type = \"osm\", zoomin = 0) + \n  geom_sf(aes(size = Count),color=\"#0288D1\", alpha = 0.7)+\n  theme_bw()\n```\n\n\n#### Visualisasi Interaktif\n\n\nVisualisasi spasial interaktif bisa dilakukan dengan menggunakan fungsi `mapview` package `mapview`.\n\n\n```{r}\ncholera_latlong %>% \n  mapview::mapview(zcol = \"Count\")\n```\n\n\nargumen `zcol` digunakan untuk menampilkan informasi tertentu dalam bentuk warna.\n\n\n\n## Data Spasial dengan geometri poligon\n\nUntuk ilustrasi data spasial yang berbentuk poligon, kita akan mencoba melakukan visualisasi spasial Jumlah tenaga kesehatan masyarakat setiap Kabupaten/kota di Jawa Barat tahun 2021.\n\n\n### Import data spasial\n\n\n```{r}\nkab_indo <- st_read(\"Admin2Kabupaten/idn_admbnda_adm2_bps_20200401.shp\")\n```\n\n\nSetelah proses import selesai, maka akan tampil beberapa informasi tentang data spasial yang diimport seperti\n\n* 522 Features dan 14 fields berarti terdapat 522 objek spasial (poligon) dan 14 kolom data yang bersesuaian dengan objek spasial tersebut. Dalam kasus ini banyaknya poligon adalah sebanyak kabupaten/kota di seluruh indonesia.\n* **Tipe Geometri** pada data ini adalah `MULTIPOLYGON`.\n* **Bounding box** yang merupakan batas minimum dan maximum di latitude (sumbu $x$) atau longitude (sumbu $y$).\n* CRS yang digunakan dalam data ini adalah **WGS-84**\n\n\n\n```{r}\nkab_indo\n```\n\n\n### Import data tabular\n\n\n\n```{r}\njum_nakes <- read_csv(\"jml_tenaga_kesehatan_msyrkt__kabupatenkota.csv\")\nglimpse(jum_nakes)\n```\n\nData tabular yang kita import memliki informasi lebih dari satu tahun. Sehingga kita perlu `filter` terlebih dahulu untuk Tahun 2021.\n\n```{r}\njum_nakes %>% \n  count(tahun)\n```\n\nBerikut ilustrasi filternya:\n\n\n```{r}\njum_nakes2021 <- jum_nakes %>% \n                    filter(tahun==2021) %>%\n                    select(nama_kabupaten_kota,jumlah_nakesmas)\njum_nakes2021\n```\n\n### Visualisasi Data Spasial\n\n#### Visualisasi Statis \n\nSama seperti sebelumnya, visualisasi data spasial juga menggunakan package `ggplot2` dan fungsi `geom_sf`.\n\n\n```{r}\nggplot(data = kab_indo)+\n  geom_sf()+\n  theme_bw()\n```\n\nHasil visualisasi diatas menujukkan peta Indonesia yang sudah terbagi menjadi poligon-poligon berdasarkan kabupaten/kota. \n\nUntuk mendapatkan hanya provinsi Jawa Barat saja, maka kita bisa menggunakan fungsi `filter` dari package `dplyr` untuk menyaring kolom `ADM1_EN` yang berisi nama-nama provinsi di Indoneisa. \n\n\n\n```{r}\njabar_kabkot <- kab_indo %>%\n                    filter(ADM1_EN==\"Jawa Barat\")\njabar_kabkot\n```\n\n\nKemudian, peta Jawa Barat bisa kita dapatkan\n\n\n```{r}\njabar_kabkot %>% \n  ggplot()+\n  geom_sf()+\n  \n  ggsflabel::geom_sf_label_repel(aes(label=str_wrap(ADM2_EN,width = 1)),size=1.75)+\n  theme_bw()+\n  theme(axis.title = element_blank())\n```\n\n* Fungsi `geom_sf_label_repel` dari package `ggsflabel` berguna untuk memberikan label-label kabupaten/kota. Karena ada kata `repel` difungsi tersebut, menyebabkan label yang dihasilkan tidak akan tumpang tindih. Label yang berpotensi tumpang-tindih satu sama lain akan digeser kemudian diberi garis yang menandakan asal dari label tersebut.\n* Fungsi `str_wrap` digunakan untuk memindahkan kata ke baris baru jika kata-kata tersebut terdiri dari dua kata seperti `\"Kota Bogor\"`.\n\n\n\n\nkita juga bisa menambahkan peta \"asli\" dari **OpenStreetMap** dengan fungsi `annotation_map_tile`.\n\n\n```{r}\njabar_kabkot %>% \n  ggplot()+\n    annotation_map_tile(type = \"osm\", zoomin = 0)+\n    geom_sf()+\n    ggsflabel::geom_sf_label_repel(aes(label=str_wrap(ADM2_EN,width = 1)),size=1.75)+\n    theme_bw()\n```\n\n\n\n\nKemudian, langkah selanjutnya kita akan memasukan informasi **jumlah tenaga kesehatan** tahun 2021 ke dalam peta diatas. Pertama kita harus memastikan bahwa nama-nama kabupaten/kota di data **jumlah tenaga kesehatan** dan di dalam data spasial kita (yang diimport dari `.shp`) itu sama. Berikut adalah hasilnya\n\n\n\n```{r}\njum_nakes2021 %>% count(nama_kabupaten_kota)\nkab_indo %>% as_tibble() %>% count(ADM2_EN)\n```\n\nBerdasarkan output tersebut, dapat disimpulkan bahwa nama kabupaten/kota dari data spasial dan data **jumlah tenaga kesehatan** tidak sama, sehingga kita perlu memodifikasi terlebih dahulu supaya sama. Dalam kasus ini kita akan memodifikasi nama kabupaten/kota dari data **jumlah tenaga kesehatan**.\n\n\n```{r}\njum_nakes2021fin <- jum_nakes2021 %>% \n                    mutate(nama_kabupaten_kota= nama_kabupaten_kota %>% \n                             #dibuang kata \"KABUPATEN\"\n                             str_remove(pattern = \"KABUPATEN \") %>% \n                             #diubah menjadi huruf kapital setiap awal kata\n                             str_to_title()\n                           )\njum_nakes2021fin\n```\n\nSetelah nama kabupaten/kota sama, langkah selanjutnya adalah menggabungkan data spasial dan data **jumlah tenaga kesehatan**. Proses penggabungan ini bisa menggunakan `*_join` dari package `dplyr`. Dalam kasus ini kita coba menggunakan `full_join` untuk mengidentifikasi apakah nama kabupaten/kota di kedua sumber sudah sama.\n\n\n```{r}\njabar_nakes <- jabar_kabkot %>% \n                  full_join(y = jum_nakes2021fin,\n                            by = join_by(ADM2_EN==nama_kabupaten_kota))\njabar_nakes\n```\n\nKarena banyaknya `features` (baris) sudah sama seperti sebelum digabung, maka hasil penggabungan sudah sesuai. Kemudian kita akan langsung membuat visualisasinya\n\n\n```{r}\np0 <- jabar_nakes %>% \n  ggplot()+\n  geom_sf(aes(fill=jumlah_nakesmas))+\n  ggsflabel::geom_sf_label_repel(aes(label=str_wrap(ADM2_EN,width = 1)),size=1.75)+\n  scale_fill_stepsn(colours = viridis::magma(n = 6,direction = -1),breaks=seq(0,300,50))+\n#colours =viridis::magma(n=10,direction = -1 ),nbreaks=5) +\n  theme_bw()+\n  theme(axis.title = element_blank())\np0\n```\n\n* Argumen `fill=jumlah_nakesmas` dalam `geom_sf(aes(fill=jumlah_nakesmas))` menunjukkan bahwa informasi **banyaknya tenaga kesehatan masyarakat** akan ditampilkan dalam bentuk warna-warna.\n* fungsi `scale_fill_stepsn` akan memberi warna pada angka-angka pada yang ada dalam kolom `jumlah_nakesmas`. Sebelumnya angka-angka tersebut harus kita ubah ke dalam interval-interval. Dalam kasus ini intervalnya adalah\n\n```{r}\nseq(0,300,50)\n```\n\n* fungsi `magma()` dari package `viridis` merupakan fungsi untuk memanggil **color** pallete. Untuk keterangan lebih lanjut silahkan help dari fungsi magma `help(viridis::magma)`.\n* Argumen `axis.title = element_blank()` dari fungsi `theme` berarti kita ingin menghilangkan judul kolom dari plot.\n\n\nkita juga bisa menambahkan peta \"asli\" dari **OpenStreetMap** dengan fungsi `annotation_map_tile`.\n\n\n```{r}\np1 <- jabar_nakes %>% \n  ggplot()+\n  annotation_map_tile(type = \"osm\", zoomin = 0)+\n  geom_sf(aes(fill=jumlah_nakesmas))+\n  ggsflabel::geom_sf_label_repel(aes(label=str_wrap(ADM2_EN,width = 1)),size=1.75)+\n  scale_fill_stepsn(colours = viridis::magma(n = 6,direction = -1),breaks=seq(0,300,50))+\n#colours =viridis::magma(n=10,direction = -1 ),nbreaks=5) +\n  theme_bw()+\n  theme(axis.title = element_blank())\np1\n```\n\n\n#### Visualisasi Interaktif\n\n\n\n\n```{r}\njabar_nakes %>% \n  mapview::mapview(zcol=\"jumlah_nakesmas\",\n                   at = seq(0,300,50),\n                   col.regions=viridis::magma(n = 7,direction = -1))\n```\n\n\n* argumen `zcol` digunakan untuk menampilkan informasi tertentu dalam bentuk warna.\n* `at` digunakan untuk membagi angka-angka yang yang akan dimasukan ke argumen `zcol` ke dalam beberapa interval.\n\n\n\n\n\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js","embed-resources":true,"toc":true,"toc-depth":6},"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":{"light":"flatly","dark":"darkly"},"page-layout":"article","comments":{"hypothesis":{"theme":"clean","openSidebar":false}},"title":"Pengenalan Geospasial dengan Simple Features `sf`","date":"8-17-2023","author":"Gerry Alfa Dito","categories":["Geospatial","R Programming","Data Visualization"],"draft":false,"image":"post-image.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}