{"title":"Statistical Machine Learning dengan `tidymodels`","markdown":{"yaml":{"title":"Statistical Machine Learning dengan `tidymodels`","date":"12-1-2023","author":"Gerry Alfa Dito","categories":["R Programming","Statistical Machine Learning","tidymodels"],"draft":false,"image":"post-image.jpg"},"headingText":"Machine learning Workflow","containsRefs":false,"markdown":"\n\n\nR memiliki beberapa ekosistem yang bisa digunakan untuk menerapkan statistical machine learning, seperti\n\na. `tidymodels` | [read more](https://www.tidymodels.org/)\nb. `mlr3` | [read more](https://mlr3.mlr-org.com/)\nc. `caret` | [read more](http://topepo.github.io/caret/index.html)\n\nManfaat dari ekosistem-ekosistem ini adalah menggabungkan model-model statistical machine lerning yang berasal dari berbagai macam package sehingga mudah untuk digunakan karena sintaksnya yang seragam. \n\nPada tulisan ini kita akan menggunakan ekosistem `tidymodels` untuk menerapkan statistical machine learning. Jika tertarik belajar lebih lanjut tentang `tidymodels` bisa membuka sumber-sumber berikut\n\na. Buku [Tidy Modeling with R](https://www.tmwr.org/)\nb. Website [Learning tidymodels](https://www.tidymodels.org/learn/)\nc. Youtube Playlist [TidyX - tidymodels](https://youtube.com/playlist?list=PLdb0LTjA9iQyCgTd8MmRS38vYrRIzdx2j&si=w28XqdooRLMTq9s-)\n\n\n\n![](Machine Learning Pipeline.png)\n\n## Data\n\nThis dataset classifies people described by a set of attributes as good or bad credit risks.\n\nAuthor: Dr. Hans Hofmann Source: UCI - 1994 Please cite: Dua, D. and Graff, C. (2019). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science.\n\nAttribute description\n\n- Status of existing checking account, in Deutsche Mark.\n- Credit history (credits taken, paid back duly, delays, critical accounts)\n- Purpose of the credit (car, television,…)\n- Credit amount\n- Status of savings account/bonds, in Deutsche Mark.\n- Present employment, in number of years.\n- Installment rate in percentage of disposable income\n- Personal status (married, single,…) and sex\n- Other debtors / guarantors\n- Present residence since X years\n- Property (e.g. real estate)\n- Age in years\n- Other installment plans (banks, stores)\n- Housing (rent, own,…)\n- Number of existing credits at this bank\n- Job\n- Number of people being liable to provide maintenance for\n- Telephone (yes,no)\n- Foreign worker (yes,no)\n- Duration in months\n\ndata bisa didownload pada link berikut:\n\n[download data](https://drive.google.com/file/d/1NzVo6uhpUVuccRCUyTAN6RTAmp8YkAaw/view?usp=share_link)\n\n\n## Package\n\n\n \n```{r eval=FALSE}\ninstall.packages(\"rpart\")\ninstall.packages(\"ranger\")\n```\n\nPackage diatas harus dinstall tapi tidak perlu dipanggil menggunakan `library`\n\n```{r message=FALSE, warning=FALSE}\nlibrary(skimr)\nlibrary(DataExplorer)\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(rpart.plot)\n```\n\n\n\n## Import Data\n\n\n```{r}\ndf <- read.csv(\"german_credit.csv\",stringsAsFactors = TRUE)\nglimpse(df)\n```\n\n\n## Eksplorasi Data\n\n\n\n```{r}\nplot_intro(df,ggtheme = theme_classic())\n```\n\n\n\n### Eksploarasi Variabel Respon\n\n\n```{r}\ndf %>% \ncount(class) %>% \nmutate(percent=n*100/sum(n),label=str_c(round(percent,2),\"%\")) %>% \nggplot(aes(x=\"\",y=n,fill=class))+\n  geom_col()+\n  geom_text(aes(label = label),\n            position = position_stack(vjust = 0.5)) +\n  coord_polar(theta = \"y\")+\n  theme_void()\n```\n\n\n\n### Eksplorasi Secara Numerik\n\n\n```{r}\nskim_without_charts(df)\n```\n\n\n### Eksplorasi Hubungan prediktor kategorik dengan respon\n\n\n```{r}\nplot_bar(data = df,by = \"class\",\n         ggtheme = theme_classic(),\n         ncol = 2)\n```\n\n\n\n### Eksplorasi Hubungan prediktor kontinu dengan respon\n\n\n```{r}\nplot_boxplot(data = df,by = \"class\",\n         ggtheme = theme_classic(),\n         geom_boxplot_args = list(fill=\"#03A9F4\"))\n```\n\n\n### Eksploarsi Hubungan antar Prediktor Kontinu\n\n\n```{r}\nplot_correlation(data = df,\n                 type = \"continuous\",\n                 cor_args = list(method=\"spearman\"),\n                 ggtheme = theme_classic(),\n                 theme_config = list(legend.position = \"none\",\n                                     axis.text.x=element_text(angle = 90)))\n```\n\n\n\n## Praproses Data\n\n\nDalam ekosistem `tidymodels`, praproses data dapat dilakukan dengan package `recipe`([read more](https://recipes.tidymodels.org/)) dan juga turunannya seperti:\n\n* package [`themis`](https://themis.tidymodels.org/) untuk menangani masalah class imbalanced\n* package [`embed`](https://embed.tidymodels.org/) untuk predictors transformation (encoding)\n* package [`textrecipes`](https://textrecipes.tidymodels.org/) untuk praproses text data\n\nTahap praproses data terdiri dari\n\n* **Data Cleaning**. Menangani Missing Value, outlier, duplikasi data dan kesalahan input data.\n* **Feature Engineering**. **Feature Engineering** adalah proses transformasi data mentah menjadi suatu fitur yang lebih baik dalam merepresentasikan pola yang terkandung di dalam data, sehingga dapat meningkatkan performa model.\n\nBerikut adalah ilustrasi penggunaan package recipe untuk **Feature Engineering**. \n\n> Disclaimer: praproses di bawah hanya diperuntukan untuk ilustrasi penggunaan package `recipe` saja sehingga tidak memiliki alasan khusus kenapa di terapan tahapan praproses dibawah ini.\n\n\n### Tanpa Praproses\n\nKita hanya perlu menuliskan fungsi `recipe` dari package `recipe` dengan argumen `formula` dan `data`.\n\n```{r}\nno_preproc <- recipe(formula=class~.,data = df)\n```\n\n\n### Dengan Praproses\n\n\nKita perlu menambahkan fungsi `step_*` setelah fungsi `recipe`. Dalam ilustrasi ini, kita akan mereduksi dimensi seluruh variabel prediktor kontinu ke 3 dimensi saja dengan metode **PCA**. Hal ini dapat dicapai dengan menggunakan fungsi `step_pca`.\n\n\n```{r}\nbasic_prepoc <- recipe(class~.,data = df) %>% \n  step_pca(all_numeric_predictors(),\n           num_comp = 3,\n           options = list(center = TRUE,\n                          scale. = TRUE))\n```\n\n\n* fungsi `all_numeric_predictors()` menandakan bahwa variabel yang akan direduksi adalah semua variabel prediktor kontinu\n* `num_comp=3` berarti kita akan mereduksi dimensi menjadi 3 dimensi\n* `options = list(center = TRUE,scale. = TRUE)` berarti sebelum direduksi dimensi variabel asalnya kita rubah menjadi variabel-variabel yang memiliki rata-rata yang mendekati 0 dan standar deviasi mendekati 1.\n\n\n\nKemudian, kita bisa memeriksa bagaimana hasi praproses dengan menggunakan fungsi `prep` dan `bake` seperti dibawah ini\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL)\n```\n\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  glimpse()\n```\n\n\nSelanjutnya kita dapat menambahkan tahap praproses lain dengan menuliskan fungsi `step_*` lainnya. Sebagai ilustrasi kita akan mereduksi banyaknya kategori di variabel `purpose` dengan menyatukan beberapa kategori yang memiliki frekuensi sedikit\n\n\n```{r}\ndf %>% \n  count(purpose) %>% \n  arrange(n)\n```\n\nMisal kita akan menggabungkan kategori yang memiliki frekuensi dibawah 50. Berdasarkan output diatas, maka kategori yang akan digabungkan adalah kategori `retraining`,`domestic appliance`, `other` dan `repairs`.\n\n\nKita bisa mereduksi banyaknya kategori dalam suatu variabel kategorik dengan fungsi `step_other`.\n\n```{r}\nbasic_prepoc <- basic_prepoc %>% \n                step_other(purpose,threshold = 50)\n```\n\n* `threshold = 50` berarti kategori yang memiliki frekuensi dibawah 50 akan digabung.\n\n\nBerikut adalah hasil praprosesnya\n\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  glimpse()\n```\n\n\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  count(purpose) %>% \n  arrange(n)\n```\n\n\natau kita bisa menuliskan sintaksnya secara langsung\n \n \n```{r}\nbasic_prepoc <- recipe(class~.,data = df) %>% \n  step_pca(all_numeric_predictors(),\n           num_comp = 3,\n           options = list(center = TRUE,\n                          scale. = TRUE)) %>% \n  step_other(purpose,threshold = 50)\n```\n\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  glimpse()\n\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  count(purpose)\n```\n\nFungsi `step_*` lainnya bisa diakses pada [website `recipe` berikut ini](https://recipes.tidymodels.org/reference/index.html)\n\n## Model Training and Evaluation\n\nTahap ini harusnya berada di dalam Tahap Model Selection. Namun diletakan sebelum Model Selection hanya untuk ilustrasi saja. Pada Praktiknya bisa langsung ke Model Selection.\n\n\n### Mendefinisikan model\n\nModel-model yang bisa digunakan dalam ekosistem `tidymodels` ada di dalam pacakge `parsnip`([read more](https://parsnip.tidymodels.org/)).Selain itu package turunan dari `parsnip`  seperti [`brulee`](https://brulee.tidymodels.org/) dan [`bonsai`](https://bonsai.tidymodels.org/) juga bisa digunakan.\n\nPackage `parsnip` menggunakan istilah `engine` untuk mengakses package asal dari model. Misalkan saja untuk model `decision_tree` kita bisa menggunakan package/engine `rpart` dan `C5.0` (dengan catatan kita harus menginstall package tersebut). Daftar lengkap package/engine yang bisa digunakan untuk `decision_tree` ada di [website `parsnip`](https://recipes.tidymodels.org). \n\nBerikut adalah ilustrasi penggunaanya\n\n\n```{r}\ntree_mod <- decision_tree() %>% \n            set_engine(engine = \"rpart\") %>% \n            set_mode(mode = \"classification\")\n```\n\n* fungsi `decision_tree` berarti kita ingin menggunakan model decision tree\n* fungsi `set_engine` digunakan untuk mengakses package/engine yang digunakan untuk model\n* fungsi `set_mode` digunakan untuk menentukan apakah problem yang dihadapi merupakan `classification` atau `regression`\n\n\n### Pembagian Data\n\nTahap pembagian data ini sangat bergantung pada package `rsample`([read more](https://rsample.tidymodels.org/index.html)). Metode-metode yang ada di dalam `rsample` adalah\n\na. Holdout Sample dengan fungsi `initial_split`\nb. Cross Validation dengan fungsi `vfold_cv`\nc. Group Cross Validation dengan fungsi `group_vfold_cv`\nd. Leave-One-Out Cross-Validation dengan fungsi `loo_cv`\n\n\n```{r}\nbasic_split <- initial_split(data = df,\n                             prop = 0.8,\n                             strata = \"class\")\n```\n\n* `data = df` untuk menentukan data yang akan dilakukan pembagian\n* `prop=0.8` proporsi pembagian yang dialokasikan ke data training\n* `strata = \"class\"` teknik sampling yang digunakan untuk melakukan pembagian adalah Stratified Random Sampling dengan didasarkan stratifikasi pada peubah respon `class`.\n\n\nBerikut adalah hasil pembagianya\n\n```{r}\ntidy(basic_split) %>% \n  count(Data)\n```\n\n\nTraining (Analysis) data yang kita dapatkan adalah 800 amatan atau $0.8 \\times 1000$, sedangkan Testing (Assessment) data yang didapatkan adalah 200 amatan atau $(1-0.8)*1000$.\n\n\nBerikut adalah sintaks untuk memesiahkan training data dan testing data.\n\n```{r}\ntrain_df <- training(basic_split)\ndim(train_df)\ntest_df <- testing(basic_split)\ndim(test_df)\n```\n\n\n* fungsi `training` berguna memisahkan training data dari data awal\n* fungsi `testing` berguna memisahkan testing data dari data awal\n\n\n### Model Training\n\nModel training bisa dilakukan dengan memanfaatkan fungsi `workflow` seperti dibawah ini:\n\n\n```{r}\ntree_mod_trained <- workflow() %>% \n                    add_recipe(recipe = no_preproc) %>% \n                    add_model(spec = tree_mod) %>% \n                    fit(data=train_df)\n```\n\n* fungsi `add_recipe` digunakan untuk menambahkan tahap praproses data menggunakan package `recipe`\n* fungsi `add_model` digunakan untuk menambahkan model yang akan dilakukan training.\n* fungsi `fit` digunakan untuk menjalankan training.\n\n\n### Model Evaluation\n\n\n\n#### Prediksi Testing Data\n\n\nBerikut adalah sintaks mendapatkan prediksi testing data dalam bentuk kategori (`factor`)\n\n\n```{r}\npred_tree_mod <- tree_mod_trained %>% \n                  predict(new_data = test_df,type = \"class\")\n                  \npred_tree_mod \n```\n\n* `type = \"class\"` argumen untuk mendapatkan prediksi dalam bentuk kategori (`factor`)\n* Pada dasarnya hasil prediksi dari tree berbentuk peluang, secara otomatis diubah menjadi kategori variabel respon dengan threshold=0.5\n\n\nBerikut adalah sintaks mendapatkan prediksi testing data dalam bentuk peluang\n\n\n```{r}\nprob_tree_mod <- tree_mod_trained %>% \n                  predict(new_data = test_df,type = \"prob\")\nprob_tree_mod\n```\n* `type = \"prob\"` argumen untuk mendapatkan prediksi dalam bentuk [kategori (`factor`) peluang\n\n#### Confussion Matrix\n\n\nBerikut adalah sintaks untuk menambahkan kolom variabel respon dari testing data\n\n```{r}\npred_tree_mod <- pred_tree_mod %>% \n                 #menambahkan kolom truth\n                 mutate(truth=test_df$class)\npred_tree_mod\n```\n\nSelanjutnya, kita akan mengeluarkan confussion matriks \n\n```{r}\nconfussion_matrix <- pred_tree_mod %>%\n                      conf_mat(truth=truth,estimate=.pred_class)\n```\n\nConfusion matriks dapat ditampilkan dalam bentuk chart sebagai berikut:\n\n```{r}\nautoplot(confussion_matrix,type = \"heatmap\")+\n  scale_fill_gradient(low = \"#F4AFAB\",high = \"#EE847E\")\n```\n\n\n* fungsi `autoplot` digunakan untuk mennampilkan confussion matrix\n* fungsi `scale_fill_gradient` digunakan untuk memberi warna pada confussion matrix\n* Berdasarkan output confussion matrix, terlihat bahwa sebagai hasil prediksi dari kategori `bad` banyak yang salah prediksi dibandingkan dengan hasil prediksi dari kategori `good`.\n\n\n#### Evaluasi model dengan metric \n\nPertama-tama, kita harus definsikan terlebih dahulu metrics yang kita gunakan. Metrics-metrics ini didapatkan dengan menggunakan package `yardstick`([read more](https://yardstick.tidymodels.org/)).\n\n\n```{r}\nmulti_metric <- metric_set(accuracy,\n                           sensitivity,\n                           specificity,\n                           bal_accuracy,\n                           f_meas)\n```\n\n* fungsi `metric_set` digunakan untuk menyatukan beberapa metrik evaluasi.\n* `f_meas` adalah metrik f1-score\n\n\nBerikut adalah hasil evaluasi prediksi pada testing data menggunakan 5 metrik yang sudah didefinisikan\n\n\n```{r}\npred_tree_mod %>%\n  #menambahkan kolom truth\n  mutate(truth=test_df$class) %>% \n  # evaluasi prediksi berdasarkan metrik\n  multi_metric(truth = truth,estimate = .pred_class)\n```\n\nKemudian, metrik `auc` dibawah ini digunakan untuk mengevaluasi prediksi dalam bentuk peluang.\n\n\n```{r}\nprob_tree_mod %>%\n  mutate(truth=test_df$class) %>% \n  roc_auc(truth = truth,.pred_bad)\n```\n\n## Model Selection\n\n\nPada tahap ini kita bisa memilih model yang terbaik untuk kasus data kita. Beberapa langkah di tahap **Model Selection** sudah dijelaskan di **Model Training and Evaluation**. Sebagai ilustrasi kita akan membandingkan hasil model pohon, random forest dan regresi logistik.\n\n\n### Mendefinisikan model\n\n\nSeperti yang dijelaskan sebelumnya, model-model yang ada di package `parsnip` berasal dari package-package yang berbeda, berikut rinciannya:\n\n* Decision tree menggunakan package `rpart`\n* Random Forest menggunakan package `ranger`\n* Regresi Logistik menggunakan fungsi `glm` dari package `stats`\n\n\nBerikut adalah sintaks untuk mendefinsikan model, penjelasan detailnya sama seperti yang sebelumnya:\n\n\n```{r}\ntree_mod <- decision_tree() %>%\n              set_engine(engine = \"rpart\") %>% \n              set_mode(mode = \"classification\")\n```\n\n\n```{r}\nrf_mod <- rand_forest() %>% \n          set_engine(engine = \"ranger\",importance=\"impurity\") %>% \n          set_mode(mode = \"classification\")\n```\n\n* `importance=\"impurity\"` digunakan untuk mengekstrak variable importance dari random forest\n\n\n\n```{r}\nlr_mod <- logistic_reg() %>% \n          set_engine(engine = \"glm\") %>% \n          set_mode(mode = \"classification\")\n```\n\n\n### Pembagian Data\n\n\nPembagian data dilakukan dengan menggunakan metode **Cross Validation** dengan fungsi `vfold_cv`. Berikut sintaksnya:\n\n\n```{r}\nfolds <- vfold_cv(data = df,v = 10,strata = \"class\")\n```\n\n\n* `v = 10` untuk menentukan banyaknya fold yang digunakan dalam **Cross Validation** adalah 10.\n* `strata = \"class\"` metode sampling yang digunakan adalah Stratified Random Sampling dengan stratifikasi berdasarkan kolom `class` yang berperan sebagai variabel respon.\n\n\n### Model Training and Evaluation\n\n\nModel Training and Evaluation akan dilakukan dengan bantuan fungsi `workflow_set` dan `workflow_map`. Kedua fungsi ini memungkinkan kita untuk melakukan pemilihan model terbaik berdasarkan metrik-metrik tertentu.\n\nFungsi `workflow_set` digunakan untuk menginput tahap praproses data dan model apa  yang digunakan. Sementara itu, fungsi `workflow_map` digunakan untuk menginputkan metode pembagian data dan metrik sekaligus **melakukan model training and evaluation**. Berikut adalah sintaksnya:\n\n\n```{r}\nmod_selection_trained <- workflow_set(preproc = list(no=no_preproc,basic=basic_prepoc),\n                                      models = list(tree_mod,rf_mod,lr_mod),\n                                      cross = TRUE ) %>%\n                         workflow_map(fn = \"fit_resamples\",\n                                       resamples= folds,\n                                       metrics = multi_metric,\n                                       control = control_resamples(save_workflow = TRUE),\n                                       seed = 2045)\n```\n\n* argumen `preproc` digunakan untuk menginputkan tahap praproses data\n* sintaks `no=` dan `basic=` digunakan untuk memberi nama pada tahap praproses data\n* argumen `models` digunakan untuk menginputkan model\n* argumen `cross=TRUE` menandakan bahwa tahap praproses data dan model dipasangkan secara kombinasi. Sebagai ilustrasi tahap praproses data `basic` akan dipasangkan dengan model decision tree, random forest dan regresi logistik.\n* argumen `cross=TRUE` menandakan bahwa tahap praproses data dan model dipasangkan sesuai dengan urutanyan. Sebgai ilustrasi tahap praproses data `no` dipasangkan dengan decision. tree dan tahap praproses data `basic` akan dipasangkan dengan random forest. Semetara model regresi logistik tidak punya tahap praproses data sehingga akan menyebabkan `error`.\n* argumen `fn` digunakan untuk menentukan fungsi tidymodels yang akan digunakan.\n* argumen `resamples` digunakan untuk menginputkan metode pembagian data\n* argumen `metrics` digunakan untuk menginputkan metrik-metrik.\n* untuk argumen `control` bisa melihat help untuk lebih jelas.\n\n\nHasil training and evaluation pada sintaks sebelumnya disimpan dalam objek `mod_selection_trained`. Selanjutnya kita akan menampilkan hasilnya dengan menggunakan ranking.\n\n\n```{r}\ncustom_output <- function(data){\n  data %>% \n  mutate(method = map_chr(wflow_id, ~ str_split(.x, \"_\",simplify = TRUE)[1])) %>% \n                        select(method,model,.metric,mean,std_err,rank)\n}\n\nmod_selection_result <- rank_results(mod_selection_trained,\n                                     rank_metric = \"bal_accuracy\") %>% \n                        custom_output()\n                        \n```\n\n* argumen `rank_metric` digunakan untuk menentukan metrik apa yang digunakan sebagai ranking. Dalam hal ini metrik yang digunakan adalah **balanced accuracy**\n* fungsi `custom_output` digunakan untuk mengkustomisasi output yang dihasilkan. Fungsi ini bisa tidak perlu dirubah-rubah.\n\n\n```{r}\nmod_selection_result\n```\n\n\n```{r}\nmod_selection_result %>% \n  ggplot(aes(x = rank, y = mean, pch = method, col = model)) + \n  geom_point(cex = 3)+\n  facet_wrap(~.metric)+\n  theme_bw()\n```\n\n\nBerdasarkan output diatas, kombinasi praproses data dan model yang menempati ranking 1 berdasarkan metrik **balanced accuracy** adalah `no`+`logistic_regression`. Sehingga model terbaik yang kita peroleh adalah `no`+`logistic_regression`.\n\n\n\n\n\nSetelah mendapatkan model terbaik kita bisa mengekstraknya model tersebut kemudian melakukan training ulang dengan seluruh data yang dimiliki menggunakan fungsi `fit_best` berikut ini\n\n```{r}\nbest_mod <- fit_best(x = mod_selection_trained,\n                     metric=\"bal_accuracy\")\nbest_mod\n```\n\nuntuk memastikan training data yang digunakan adalah seluruh data yang kita miliki, kita bisa menggunakan fungsi dibawah ini:\n\n\n```{r}\nextract_recipe(best_mod)\n```\n\n\n\n## Model Interpretability (Explainability)\n\n\nTahap ini meruapakan tahap untuk mengerti bagaimana variabel-variabel prediktor berpengaruh terhadap prediksi berdasarkan **model terbaik** yang diperoleh pada tahap model selection.\n\n\n## Model Terbaik\n\nKarena model terbaik adalah regresi logistik maka kita bisa menggunakan nilai koefisien dari regresi logistik untuk memahami bagaimana variabel-variabel prediktor berpengaruh terhadap prediksi.\n\n\n```{r}\ntidy(best_mod,exponentiate=TRUE) %>% \n  mutate(across(where(is.numeric),~round(.x,3)))\n```\n\n\n### Tambahan\n\nDibawah ini adalah ilustrasi tambahan model interpretability untuk decision tree dan random forest.\n\n\n```{r}\n# Retraining decision tree dengan seluruh data\ntree_mod_trained <- workflow() %>% \n                    add_recipe(recipe = no_preproc) %>% \n                    add_model(spec = tree_mod) %>% \n                    fit(data=df)\n```\n\n\n```{r}\nextract_fit_engine(tree_mod_trained) %>% \n    rpart.plot(type = 2,extra = 106,\n               faclen = -1,\n               box.palette =blues9[-8:-9] ,\n               tweak = 1.4)\n```\n\n\n\n\n\n```{r}\n# Retraining Random Forest dengan seluruh data\nrf_mod_trained <- workflow() %>% \n                    add_recipe(recipe = no_preproc) %>% \n                    add_model(spec = rf_mod) %>% \n                    fit(data=df)\n```\n\n\nfungsi `plot_importance` merupakan fungsi bantuan yang tidak perlu dirubah-rubah.\n\n```{r}\nplot_importance<- function(rf){\n  rf %>% \n  ranger::importance() %>% \n  as.data.frame() %>% \n  rownames_to_column(\"Variables\") %>% \n  rename(\"impurity\"=\".\") %>% \n  arrange(impurity) %>% \n  mutate(Variables=factor(Variables,levels=Variables)) %>% \n  ggplot(aes(Variables,impurity))+\n  geom_col(fill=\"#03A9F4\")+\n  coord_flip()+\n  theme_classic()+\n  theme(axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank() )+\n  scale_y_continuous(expand = c(0,0))\n}\n```\n\n\n```{r}\nextract_fit_engine(rf_mod_trained) %>% \n  plot_importance()\n```\n\n\n\n\n## Model Deployment\n\n\nPada tahap ini kita akan menggunakan model untuk keperluan prediksi data baru. Hal pertama yang mungkin kita bisa lakukan adalah menyimpan model terbaik ke file berbentuk `rds` sehingga kita bisa menggunakanya tanpa perlu running sintaks dari awal. Tahap penyimpanan ini **tidak wajib** untuk dilakukan\n\n```{r}\nsaveRDS(best_mod,file = \"credit_model.rds\")\n```\n\nSintaks diatas berarti kita menyimpan model terbaik dalam file bernama `credit_model.rds`.\n\n\n\n### Prediksi Data Baru\n\n\n\n```{r}\nset.seed(2045)\ndata_baru_dummy <- df %>% \n                   slice_sample(n=7) %>% \n                   select(-class)\ndata_baru_dummy\n```\n\n\n\n```{r}\nnew_pred <- readRDS(\"credit_model.rds\") %>% \n              predict(new_data = data_baru_dummy,type = \"class\")\nnew_pred\n```\n\nsintaks `readRDS(\"credit_model.rds\")` untuk meload model terbaik yang sudah kita simpan.\n\n\n```{r}\nwrite.csv(x = new_pred,file = \"submission.csv\",row.names = F)\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n\nR memiliki beberapa ekosistem yang bisa digunakan untuk menerapkan statistical machine learning, seperti\n\na. `tidymodels` | [read more](https://www.tidymodels.org/)\nb. `mlr3` | [read more](https://mlr3.mlr-org.com/)\nc. `caret` | [read more](http://topepo.github.io/caret/index.html)\n\nManfaat dari ekosistem-ekosistem ini adalah menggabungkan model-model statistical machine lerning yang berasal dari berbagai macam package sehingga mudah untuk digunakan karena sintaksnya yang seragam. \n\nPada tulisan ini kita akan menggunakan ekosistem `tidymodels` untuk menerapkan statistical machine learning. Jika tertarik belajar lebih lanjut tentang `tidymodels` bisa membuka sumber-sumber berikut\n\na. Buku [Tidy Modeling with R](https://www.tmwr.org/)\nb. Website [Learning tidymodels](https://www.tidymodels.org/learn/)\nc. Youtube Playlist [TidyX - tidymodels](https://youtube.com/playlist?list=PLdb0LTjA9iQyCgTd8MmRS38vYrRIzdx2j&si=w28XqdooRLMTq9s-)\n\n\n## Machine learning Workflow\n\n![](Machine Learning Pipeline.png)\n\n## Data\n\nThis dataset classifies people described by a set of attributes as good or bad credit risks.\n\nAuthor: Dr. Hans Hofmann Source: UCI - 1994 Please cite: Dua, D. and Graff, C. (2019). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science.\n\nAttribute description\n\n- Status of existing checking account, in Deutsche Mark.\n- Credit history (credits taken, paid back duly, delays, critical accounts)\n- Purpose of the credit (car, television,…)\n- Credit amount\n- Status of savings account/bonds, in Deutsche Mark.\n- Present employment, in number of years.\n- Installment rate in percentage of disposable income\n- Personal status (married, single,…) and sex\n- Other debtors / guarantors\n- Present residence since X years\n- Property (e.g. real estate)\n- Age in years\n- Other installment plans (banks, stores)\n- Housing (rent, own,…)\n- Number of existing credits at this bank\n- Job\n- Number of people being liable to provide maintenance for\n- Telephone (yes,no)\n- Foreign worker (yes,no)\n- Duration in months\n\ndata bisa didownload pada link berikut:\n\n[download data](https://drive.google.com/file/d/1NzVo6uhpUVuccRCUyTAN6RTAmp8YkAaw/view?usp=share_link)\n\n\n## Package\n\n\n \n```{r eval=FALSE}\ninstall.packages(\"rpart\")\ninstall.packages(\"ranger\")\n```\n\nPackage diatas harus dinstall tapi tidak perlu dipanggil menggunakan `library`\n\n```{r message=FALSE, warning=FALSE}\nlibrary(skimr)\nlibrary(DataExplorer)\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(rpart.plot)\n```\n\n\n\n## Import Data\n\n\n```{r}\ndf <- read.csv(\"german_credit.csv\",stringsAsFactors = TRUE)\nglimpse(df)\n```\n\n\n## Eksplorasi Data\n\n\n\n```{r}\nplot_intro(df,ggtheme = theme_classic())\n```\n\n\n\n### Eksploarasi Variabel Respon\n\n\n```{r}\ndf %>% \ncount(class) %>% \nmutate(percent=n*100/sum(n),label=str_c(round(percent,2),\"%\")) %>% \nggplot(aes(x=\"\",y=n,fill=class))+\n  geom_col()+\n  geom_text(aes(label = label),\n            position = position_stack(vjust = 0.5)) +\n  coord_polar(theta = \"y\")+\n  theme_void()\n```\n\n\n\n### Eksplorasi Secara Numerik\n\n\n```{r}\nskim_without_charts(df)\n```\n\n\n### Eksplorasi Hubungan prediktor kategorik dengan respon\n\n\n```{r}\nplot_bar(data = df,by = \"class\",\n         ggtheme = theme_classic(),\n         ncol = 2)\n```\n\n\n\n### Eksplorasi Hubungan prediktor kontinu dengan respon\n\n\n```{r}\nplot_boxplot(data = df,by = \"class\",\n         ggtheme = theme_classic(),\n         geom_boxplot_args = list(fill=\"#03A9F4\"))\n```\n\n\n### Eksploarsi Hubungan antar Prediktor Kontinu\n\n\n```{r}\nplot_correlation(data = df,\n                 type = \"continuous\",\n                 cor_args = list(method=\"spearman\"),\n                 ggtheme = theme_classic(),\n                 theme_config = list(legend.position = \"none\",\n                                     axis.text.x=element_text(angle = 90)))\n```\n\n\n\n## Praproses Data\n\n\nDalam ekosistem `tidymodels`, praproses data dapat dilakukan dengan package `recipe`([read more](https://recipes.tidymodels.org/)) dan juga turunannya seperti:\n\n* package [`themis`](https://themis.tidymodels.org/) untuk menangani masalah class imbalanced\n* package [`embed`](https://embed.tidymodels.org/) untuk predictors transformation (encoding)\n* package [`textrecipes`](https://textrecipes.tidymodels.org/) untuk praproses text data\n\nTahap praproses data terdiri dari\n\n* **Data Cleaning**. Menangani Missing Value, outlier, duplikasi data dan kesalahan input data.\n* **Feature Engineering**. **Feature Engineering** adalah proses transformasi data mentah menjadi suatu fitur yang lebih baik dalam merepresentasikan pola yang terkandung di dalam data, sehingga dapat meningkatkan performa model.\n\nBerikut adalah ilustrasi penggunaan package recipe untuk **Feature Engineering**. \n\n> Disclaimer: praproses di bawah hanya diperuntukan untuk ilustrasi penggunaan package `recipe` saja sehingga tidak memiliki alasan khusus kenapa di terapan tahapan praproses dibawah ini.\n\n\n### Tanpa Praproses\n\nKita hanya perlu menuliskan fungsi `recipe` dari package `recipe` dengan argumen `formula` dan `data`.\n\n```{r}\nno_preproc <- recipe(formula=class~.,data = df)\n```\n\n\n### Dengan Praproses\n\n\nKita perlu menambahkan fungsi `step_*` setelah fungsi `recipe`. Dalam ilustrasi ini, kita akan mereduksi dimensi seluruh variabel prediktor kontinu ke 3 dimensi saja dengan metode **PCA**. Hal ini dapat dicapai dengan menggunakan fungsi `step_pca`.\n\n\n```{r}\nbasic_prepoc <- recipe(class~.,data = df) %>% \n  step_pca(all_numeric_predictors(),\n           num_comp = 3,\n           options = list(center = TRUE,\n                          scale. = TRUE))\n```\n\n\n* fungsi `all_numeric_predictors()` menandakan bahwa variabel yang akan direduksi adalah semua variabel prediktor kontinu\n* `num_comp=3` berarti kita akan mereduksi dimensi menjadi 3 dimensi\n* `options = list(center = TRUE,scale. = TRUE)` berarti sebelum direduksi dimensi variabel asalnya kita rubah menjadi variabel-variabel yang memiliki rata-rata yang mendekati 0 dan standar deviasi mendekati 1.\n\n\n\nKemudian, kita bisa memeriksa bagaimana hasi praproses dengan menggunakan fungsi `prep` dan `bake` seperti dibawah ini\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL)\n```\n\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  glimpse()\n```\n\n\nSelanjutnya kita dapat menambahkan tahap praproses lain dengan menuliskan fungsi `step_*` lainnya. Sebagai ilustrasi kita akan mereduksi banyaknya kategori di variabel `purpose` dengan menyatukan beberapa kategori yang memiliki frekuensi sedikit\n\n\n```{r}\ndf %>% \n  count(purpose) %>% \n  arrange(n)\n```\n\nMisal kita akan menggabungkan kategori yang memiliki frekuensi dibawah 50. Berdasarkan output diatas, maka kategori yang akan digabungkan adalah kategori `retraining`,`domestic appliance`, `other` dan `repairs`.\n\n\nKita bisa mereduksi banyaknya kategori dalam suatu variabel kategorik dengan fungsi `step_other`.\n\n```{r}\nbasic_prepoc <- basic_prepoc %>% \n                step_other(purpose,threshold = 50)\n```\n\n* `threshold = 50` berarti kategori yang memiliki frekuensi dibawah 50 akan digabung.\n\n\nBerikut adalah hasil praprosesnya\n\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  glimpse()\n```\n\n\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  count(purpose) %>% \n  arrange(n)\n```\n\n\natau kita bisa menuliskan sintaksnya secara langsung\n \n \n```{r}\nbasic_prepoc <- recipe(class~.,data = df) %>% \n  step_pca(all_numeric_predictors(),\n           num_comp = 3,\n           options = list(center = TRUE,\n                          scale. = TRUE)) %>% \n  step_other(purpose,threshold = 50)\n```\n\n\n```{r}\n## memeriksa hasil praproses\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  glimpse()\n\nbasic_prepoc %>% \n  prep() %>% \n  bake(new_data = NULL) %>% \n  count(purpose)\n```\n\nFungsi `step_*` lainnya bisa diakses pada [website `recipe` berikut ini](https://recipes.tidymodels.org/reference/index.html)\n\n## Model Training and Evaluation\n\nTahap ini harusnya berada di dalam Tahap Model Selection. Namun diletakan sebelum Model Selection hanya untuk ilustrasi saja. Pada Praktiknya bisa langsung ke Model Selection.\n\n\n### Mendefinisikan model\n\nModel-model yang bisa digunakan dalam ekosistem `tidymodels` ada di dalam pacakge `parsnip`([read more](https://parsnip.tidymodels.org/)).Selain itu package turunan dari `parsnip`  seperti [`brulee`](https://brulee.tidymodels.org/) dan [`bonsai`](https://bonsai.tidymodels.org/) juga bisa digunakan.\n\nPackage `parsnip` menggunakan istilah `engine` untuk mengakses package asal dari model. Misalkan saja untuk model `decision_tree` kita bisa menggunakan package/engine `rpart` dan `C5.0` (dengan catatan kita harus menginstall package tersebut). Daftar lengkap package/engine yang bisa digunakan untuk `decision_tree` ada di [website `parsnip`](https://recipes.tidymodels.org). \n\nBerikut adalah ilustrasi penggunaanya\n\n\n```{r}\ntree_mod <- decision_tree() %>% \n            set_engine(engine = \"rpart\") %>% \n            set_mode(mode = \"classification\")\n```\n\n* fungsi `decision_tree` berarti kita ingin menggunakan model decision tree\n* fungsi `set_engine` digunakan untuk mengakses package/engine yang digunakan untuk model\n* fungsi `set_mode` digunakan untuk menentukan apakah problem yang dihadapi merupakan `classification` atau `regression`\n\n\n### Pembagian Data\n\nTahap pembagian data ini sangat bergantung pada package `rsample`([read more](https://rsample.tidymodels.org/index.html)). Metode-metode yang ada di dalam `rsample` adalah\n\na. Holdout Sample dengan fungsi `initial_split`\nb. Cross Validation dengan fungsi `vfold_cv`\nc. Group Cross Validation dengan fungsi `group_vfold_cv`\nd. Leave-One-Out Cross-Validation dengan fungsi `loo_cv`\n\n\n```{r}\nbasic_split <- initial_split(data = df,\n                             prop = 0.8,\n                             strata = \"class\")\n```\n\n* `data = df` untuk menentukan data yang akan dilakukan pembagian\n* `prop=0.8` proporsi pembagian yang dialokasikan ke data training\n* `strata = \"class\"` teknik sampling yang digunakan untuk melakukan pembagian adalah Stratified Random Sampling dengan didasarkan stratifikasi pada peubah respon `class`.\n\n\nBerikut adalah hasil pembagianya\n\n```{r}\ntidy(basic_split) %>% \n  count(Data)\n```\n\n\nTraining (Analysis) data yang kita dapatkan adalah 800 amatan atau $0.8 \\times 1000$, sedangkan Testing (Assessment) data yang didapatkan adalah 200 amatan atau $(1-0.8)*1000$.\n\n\nBerikut adalah sintaks untuk memesiahkan training data dan testing data.\n\n```{r}\ntrain_df <- training(basic_split)\ndim(train_df)\ntest_df <- testing(basic_split)\ndim(test_df)\n```\n\n\n* fungsi `training` berguna memisahkan training data dari data awal\n* fungsi `testing` berguna memisahkan testing data dari data awal\n\n\n### Model Training\n\nModel training bisa dilakukan dengan memanfaatkan fungsi `workflow` seperti dibawah ini:\n\n\n```{r}\ntree_mod_trained <- workflow() %>% \n                    add_recipe(recipe = no_preproc) %>% \n                    add_model(spec = tree_mod) %>% \n                    fit(data=train_df)\n```\n\n* fungsi `add_recipe` digunakan untuk menambahkan tahap praproses data menggunakan package `recipe`\n* fungsi `add_model` digunakan untuk menambahkan model yang akan dilakukan training.\n* fungsi `fit` digunakan untuk menjalankan training.\n\n\n### Model Evaluation\n\n\n\n#### Prediksi Testing Data\n\n\nBerikut adalah sintaks mendapatkan prediksi testing data dalam bentuk kategori (`factor`)\n\n\n```{r}\npred_tree_mod <- tree_mod_trained %>% \n                  predict(new_data = test_df,type = \"class\")\n                  \npred_tree_mod \n```\n\n* `type = \"class\"` argumen untuk mendapatkan prediksi dalam bentuk kategori (`factor`)\n* Pada dasarnya hasil prediksi dari tree berbentuk peluang, secara otomatis diubah menjadi kategori variabel respon dengan threshold=0.5\n\n\nBerikut adalah sintaks mendapatkan prediksi testing data dalam bentuk peluang\n\n\n```{r}\nprob_tree_mod <- tree_mod_trained %>% \n                  predict(new_data = test_df,type = \"prob\")\nprob_tree_mod\n```\n* `type = \"prob\"` argumen untuk mendapatkan prediksi dalam bentuk [kategori (`factor`) peluang\n\n#### Confussion Matrix\n\n\nBerikut adalah sintaks untuk menambahkan kolom variabel respon dari testing data\n\n```{r}\npred_tree_mod <- pred_tree_mod %>% \n                 #menambahkan kolom truth\n                 mutate(truth=test_df$class)\npred_tree_mod\n```\n\nSelanjutnya, kita akan mengeluarkan confussion matriks \n\n```{r}\nconfussion_matrix <- pred_tree_mod %>%\n                      conf_mat(truth=truth,estimate=.pred_class)\n```\n\nConfusion matriks dapat ditampilkan dalam bentuk chart sebagai berikut:\n\n```{r}\nautoplot(confussion_matrix,type = \"heatmap\")+\n  scale_fill_gradient(low = \"#F4AFAB\",high = \"#EE847E\")\n```\n\n\n* fungsi `autoplot` digunakan untuk mennampilkan confussion matrix\n* fungsi `scale_fill_gradient` digunakan untuk memberi warna pada confussion matrix\n* Berdasarkan output confussion matrix, terlihat bahwa sebagai hasil prediksi dari kategori `bad` banyak yang salah prediksi dibandingkan dengan hasil prediksi dari kategori `good`.\n\n\n#### Evaluasi model dengan metric \n\nPertama-tama, kita harus definsikan terlebih dahulu metrics yang kita gunakan. Metrics-metrics ini didapatkan dengan menggunakan package `yardstick`([read more](https://yardstick.tidymodels.org/)).\n\n\n```{r}\nmulti_metric <- metric_set(accuracy,\n                           sensitivity,\n                           specificity,\n                           bal_accuracy,\n                           f_meas)\n```\n\n* fungsi `metric_set` digunakan untuk menyatukan beberapa metrik evaluasi.\n* `f_meas` adalah metrik f1-score\n\n\nBerikut adalah hasil evaluasi prediksi pada testing data menggunakan 5 metrik yang sudah didefinisikan\n\n\n```{r}\npred_tree_mod %>%\n  #menambahkan kolom truth\n  mutate(truth=test_df$class) %>% \n  # evaluasi prediksi berdasarkan metrik\n  multi_metric(truth = truth,estimate = .pred_class)\n```\n\nKemudian, metrik `auc` dibawah ini digunakan untuk mengevaluasi prediksi dalam bentuk peluang.\n\n\n```{r}\nprob_tree_mod %>%\n  mutate(truth=test_df$class) %>% \n  roc_auc(truth = truth,.pred_bad)\n```\n\n## Model Selection\n\n\nPada tahap ini kita bisa memilih model yang terbaik untuk kasus data kita. Beberapa langkah di tahap **Model Selection** sudah dijelaskan di **Model Training and Evaluation**. Sebagai ilustrasi kita akan membandingkan hasil model pohon, random forest dan regresi logistik.\n\n\n### Mendefinisikan model\n\n\nSeperti yang dijelaskan sebelumnya, model-model yang ada di package `parsnip` berasal dari package-package yang berbeda, berikut rinciannya:\n\n* Decision tree menggunakan package `rpart`\n* Random Forest menggunakan package `ranger`\n* Regresi Logistik menggunakan fungsi `glm` dari package `stats`\n\n\nBerikut adalah sintaks untuk mendefinsikan model, penjelasan detailnya sama seperti yang sebelumnya:\n\n\n```{r}\ntree_mod <- decision_tree() %>%\n              set_engine(engine = \"rpart\") %>% \n              set_mode(mode = \"classification\")\n```\n\n\n```{r}\nrf_mod <- rand_forest() %>% \n          set_engine(engine = \"ranger\",importance=\"impurity\") %>% \n          set_mode(mode = \"classification\")\n```\n\n* `importance=\"impurity\"` digunakan untuk mengekstrak variable importance dari random forest\n\n\n\n```{r}\nlr_mod <- logistic_reg() %>% \n          set_engine(engine = \"glm\") %>% \n          set_mode(mode = \"classification\")\n```\n\n\n### Pembagian Data\n\n\nPembagian data dilakukan dengan menggunakan metode **Cross Validation** dengan fungsi `vfold_cv`. Berikut sintaksnya:\n\n\n```{r}\nfolds <- vfold_cv(data = df,v = 10,strata = \"class\")\n```\n\n\n* `v = 10` untuk menentukan banyaknya fold yang digunakan dalam **Cross Validation** adalah 10.\n* `strata = \"class\"` metode sampling yang digunakan adalah Stratified Random Sampling dengan stratifikasi berdasarkan kolom `class` yang berperan sebagai variabel respon.\n\n\n### Model Training and Evaluation\n\n\nModel Training and Evaluation akan dilakukan dengan bantuan fungsi `workflow_set` dan `workflow_map`. Kedua fungsi ini memungkinkan kita untuk melakukan pemilihan model terbaik berdasarkan metrik-metrik tertentu.\n\nFungsi `workflow_set` digunakan untuk menginput tahap praproses data dan model apa  yang digunakan. Sementara itu, fungsi `workflow_map` digunakan untuk menginputkan metode pembagian data dan metrik sekaligus **melakukan model training and evaluation**. Berikut adalah sintaksnya:\n\n\n```{r}\nmod_selection_trained <- workflow_set(preproc = list(no=no_preproc,basic=basic_prepoc),\n                                      models = list(tree_mod,rf_mod,lr_mod),\n                                      cross = TRUE ) %>%\n                         workflow_map(fn = \"fit_resamples\",\n                                       resamples= folds,\n                                       metrics = multi_metric,\n                                       control = control_resamples(save_workflow = TRUE),\n                                       seed = 2045)\n```\n\n* argumen `preproc` digunakan untuk menginputkan tahap praproses data\n* sintaks `no=` dan `basic=` digunakan untuk memberi nama pada tahap praproses data\n* argumen `models` digunakan untuk menginputkan model\n* argumen `cross=TRUE` menandakan bahwa tahap praproses data dan model dipasangkan secara kombinasi. Sebagai ilustrasi tahap praproses data `basic` akan dipasangkan dengan model decision tree, random forest dan regresi logistik.\n* argumen `cross=TRUE` menandakan bahwa tahap praproses data dan model dipasangkan sesuai dengan urutanyan. Sebgai ilustrasi tahap praproses data `no` dipasangkan dengan decision. tree dan tahap praproses data `basic` akan dipasangkan dengan random forest. Semetara model regresi logistik tidak punya tahap praproses data sehingga akan menyebabkan `error`.\n* argumen `fn` digunakan untuk menentukan fungsi tidymodels yang akan digunakan.\n* argumen `resamples` digunakan untuk menginputkan metode pembagian data\n* argumen `metrics` digunakan untuk menginputkan metrik-metrik.\n* untuk argumen `control` bisa melihat help untuk lebih jelas.\n\n\nHasil training and evaluation pada sintaks sebelumnya disimpan dalam objek `mod_selection_trained`. Selanjutnya kita akan menampilkan hasilnya dengan menggunakan ranking.\n\n\n```{r}\ncustom_output <- function(data){\n  data %>% \n  mutate(method = map_chr(wflow_id, ~ str_split(.x, \"_\",simplify = TRUE)[1])) %>% \n                        select(method,model,.metric,mean,std_err,rank)\n}\n\nmod_selection_result <- rank_results(mod_selection_trained,\n                                     rank_metric = \"bal_accuracy\") %>% \n                        custom_output()\n                        \n```\n\n* argumen `rank_metric` digunakan untuk menentukan metrik apa yang digunakan sebagai ranking. Dalam hal ini metrik yang digunakan adalah **balanced accuracy**\n* fungsi `custom_output` digunakan untuk mengkustomisasi output yang dihasilkan. Fungsi ini bisa tidak perlu dirubah-rubah.\n\n\n```{r}\nmod_selection_result\n```\n\n\n```{r}\nmod_selection_result %>% \n  ggplot(aes(x = rank, y = mean, pch = method, col = model)) + \n  geom_point(cex = 3)+\n  facet_wrap(~.metric)+\n  theme_bw()\n```\n\n\nBerdasarkan output diatas, kombinasi praproses data dan model yang menempati ranking 1 berdasarkan metrik **balanced accuracy** adalah `no`+`logistic_regression`. Sehingga model terbaik yang kita peroleh adalah `no`+`logistic_regression`.\n\n\n\n\n\nSetelah mendapatkan model terbaik kita bisa mengekstraknya model tersebut kemudian melakukan training ulang dengan seluruh data yang dimiliki menggunakan fungsi `fit_best` berikut ini\n\n```{r}\nbest_mod <- fit_best(x = mod_selection_trained,\n                     metric=\"bal_accuracy\")\nbest_mod\n```\n\nuntuk memastikan training data yang digunakan adalah seluruh data yang kita miliki, kita bisa menggunakan fungsi dibawah ini:\n\n\n```{r}\nextract_recipe(best_mod)\n```\n\n\n\n## Model Interpretability (Explainability)\n\n\nTahap ini meruapakan tahap untuk mengerti bagaimana variabel-variabel prediktor berpengaruh terhadap prediksi berdasarkan **model terbaik** yang diperoleh pada tahap model selection.\n\n\n## Model Terbaik\n\nKarena model terbaik adalah regresi logistik maka kita bisa menggunakan nilai koefisien dari regresi logistik untuk memahami bagaimana variabel-variabel prediktor berpengaruh terhadap prediksi.\n\n\n```{r}\ntidy(best_mod,exponentiate=TRUE) %>% \n  mutate(across(where(is.numeric),~round(.x,3)))\n```\n\n\n### Tambahan\n\nDibawah ini adalah ilustrasi tambahan model interpretability untuk decision tree dan random forest.\n\n\n```{r}\n# Retraining decision tree dengan seluruh data\ntree_mod_trained <- workflow() %>% \n                    add_recipe(recipe = no_preproc) %>% \n                    add_model(spec = tree_mod) %>% \n                    fit(data=df)\n```\n\n\n```{r}\nextract_fit_engine(tree_mod_trained) %>% \n    rpart.plot(type = 2,extra = 106,\n               faclen = -1,\n               box.palette =blues9[-8:-9] ,\n               tweak = 1.4)\n```\n\n\n\n\n\n```{r}\n# Retraining Random Forest dengan seluruh data\nrf_mod_trained <- workflow() %>% \n                    add_recipe(recipe = no_preproc) %>% \n                    add_model(spec = rf_mod) %>% \n                    fit(data=df)\n```\n\n\nfungsi `plot_importance` merupakan fungsi bantuan yang tidak perlu dirubah-rubah.\n\n```{r}\nplot_importance<- function(rf){\n  rf %>% \n  ranger::importance() %>% \n  as.data.frame() %>% \n  rownames_to_column(\"Variables\") %>% \n  rename(\"impurity\"=\".\") %>% \n  arrange(impurity) %>% \n  mutate(Variables=factor(Variables,levels=Variables)) %>% \n  ggplot(aes(Variables,impurity))+\n  geom_col(fill=\"#03A9F4\")+\n  coord_flip()+\n  theme_classic()+\n  theme(axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank() )+\n  scale_y_continuous(expand = c(0,0))\n}\n```\n\n\n```{r}\nextract_fit_engine(rf_mod_trained) %>% \n  plot_importance()\n```\n\n\n\n\n## Model Deployment\n\n\nPada tahap ini kita akan menggunakan model untuk keperluan prediksi data baru. Hal pertama yang mungkin kita bisa lakukan adalah menyimpan model terbaik ke file berbentuk `rds` sehingga kita bisa menggunakanya tanpa perlu running sintaks dari awal. Tahap penyimpanan ini **tidak wajib** untuk dilakukan\n\n```{r}\nsaveRDS(best_mod,file = \"credit_model.rds\")\n```\n\nSintaks diatas berarti kita menyimpan model terbaik dalam file bernama `credit_model.rds`.\n\n\n\n### Prediksi Data Baru\n\n\n\n```{r}\nset.seed(2045)\ndata_baru_dummy <- df %>% \n                   slice_sample(n=7) %>% \n                   select(-class)\ndata_baru_dummy\n```\n\n\n\n```{r}\nnew_pred <- readRDS(\"credit_model.rds\") %>% \n              predict(new_data = data_baru_dummy,type = \"class\")\nnew_pred\n```\n\nsintaks `readRDS(\"credit_model.rds\")` untuk meload model terbaik yang sudah kita simpan.\n\n\n```{r}\nwrite.csv(x = new_pred,file = \"submission.csv\",row.names = F)\n```\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js","embed-resources":true},"toc-depth":6,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":{"light":"flatly","dark":"darkly"},"page-layout":"article","comments":{"hypothesis":{"theme":"clean","openSidebar":false}},"title":"Statistical Machine Learning dengan `tidymodels`","date":"12-1-2023","author":"Gerry Alfa Dito","categories":["R Programming","Statistical Machine Learning","tidymodels"],"draft":false,"image":"post-image.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}