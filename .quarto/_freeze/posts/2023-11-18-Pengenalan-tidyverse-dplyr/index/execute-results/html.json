{
  "hash": "f5e2a38bd39ed70be40df5d8d3e2a12c",
  "result": {
    "markdown": "---\ntitle: \"Pengenalan `tidyverse` Part1: `dplyr`\"\ndate: 11-18-2023\nauthor: Gerry Alfa Dito\ncategories: \n      - R Programming\ndraft: false\nimage: post-image.jpg\n---\n\n\nMateri ini akan membahas pengenalan meta-package `tidyverse` yang merupakan kumpulan dari 8 package inti, yaitu\n\n1. `readr` digunakan untuk membaca data tabular seperti csv,tsv dan fwf\n2. `dplyr` digunakan untuk memanipulasi data\n3. `ggplot2` digunakan untuk visualisasi data berbasiskan Grammar of Graphics\n4. `tidyr` digunakan untuk merapihkan (tidying) data\n5. `purrr` digunakan untuk functional programming\n6. `tibble` digunakan sebagai alternatif `data.frame` yang lebih konsisten\n7. `forcats` digunakan untuk memanipulasi data berupa yang bertipe `factor`\n8. `stringr` digunakan untuk memanipulasi data bertipe `string`\n\n\n\n![](data-science.png)\n\n## Menginstall Meta-Package `tidyverse`\n\nPada penggunaan pertama, silahkan install terlebih dulu package yang akan digunakan dengan cara menuliskan code berikut:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n## Memanggil Package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n## Data\n\n### Global Country Information Dataset 2023\n\nDataset komprehensif ini menyediakan banyak informasi tentang semua negara di seluruh dunia, yang mencakup berbagai indikator dan atribut. Data ini mencakup statistik demografi, indikator ekonomi, faktor lingkungan, metrik perawatan kesehatan, statistik pendidikan, dan masih banyak lagi. Dengan setiap negara terwakili, dataset ini menawarkan perspektif global yang lengkap tentang berbagai aspek negara, memungkinkan analisis mendalam dan perbandingan lintas negara.\n\nBerikut adalah penjelasan kolom-kolom yang ada di dalam data:\n\n1. Country: Name of the country.\n2. Density (P/Km2): Population density measured in persons per square kilometer.\n3. Abbreviation: Abbreviation or code representing the country.\n4. Agricultural Land (%): Percentage of land area used for agricultural purposes.\n5. Land Area (Km2): Total land area of the country in square kilometers.\n6. Armed Forces Size: Size of the armed forces in the country.\n7. Birth Rate: Number of births per 1,000 population per year.\n8. Calling Code: International calling code for the country.\n9. Capital/Major City: Name of the capital or major city.\n10. CO2 Emissions: Carbon dioxide emissions in tons.\n11. CPI: Consumer Price Index, a measure of inflation and purchasing power.\n12. CPI Change (%): Percentage change in the Consumer Price Index compared to the previous year.\n13. Currency_Code: Currency code used in the country.\n14. Fertility Rate: Average number of children born to a woman during her lifetime.\n15. Forested Area (%): Percentage of land area covered by forests.\n16. Gasoline_Price: Price of gasoline per liter in local currency.\n17. GDP: Gross Domestic Product, the total value of goods and services produced in the country.\n18. Gross Primary Education Enrollment (%): Gross enrollment ratio for primary education.\n19. Gross Tertiary Education Enrollment (%): Gross enrollment ratio for tertiary education.\n20. Infant Mortality: Number of deaths per 1,000 live births before reaching one year of age.\n21. Largest City: Name of the country's largest city.\n22. Life Expectancy: Average number of years a newborn is expected to live.\n23. Maternal Mortality Ratio: Number of maternal deaths per 100,000 live births.\n24. Minimum Wage: Minimum wage level in local currency.\n25. Official Language: Official language(s) spoken in the country.\n26. Out of Pocket Health Expenditure (%): Percentage of total health expenditure paid out-of-pocket by individuals.\n27. Physicians per Thousand: Number of physicians per thousand people.\n28. Population: Total population of the country.\n29. Population: Labor Force Participation (%): Percentage of the population that is part of the labor force.\n30. Tax Revenue (%): Tax revenue as a percentage of GDP.\n31. Total Tax Rate: Overall tax burden as a percentage of commercial profits.\n32. Unemployment Rate: Percentage of the labor force that is unemployed.\n33. Urban Population: Percentage of the population living in urban areas.\n34. Latitude: Latitude coordinate of the country's location.\n35. Longitude: Longitude coordinate of the country's location.\n\nData dapat diperoleh dengan mendownload link dibawah ini\n\n[Global Country Information Dataset 2023](https://drive.google.com/file/d/1e3Qeh2mRNeD6vnU8ebfnRU9j4Q-hhAF2/view?usp=sharing)\n\n\n\n## Import data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data <- read_csv(\"world-data-2023.csv\",show_col_types = FALSE)\n```\n:::\n\n\n\n## Mengenal `dplyr`\n\n`dplyr` adalah package yang dapat digunakan untuk melakukan manipulasi data seperti melihat gambaran umum data, membuat kolom baru, menyeleksi kolom, menyaring baris (filtering), melakukan agregasi data dan masih banyak lagi.\n\n\n### Fungsi `glimpse`\n\nFungsi `glimpse` digunakan untuk mendapatkan gambaran umum data seperti tipe data (`dbl`,`int`,`chr`,`factor`,`lgl`), snapshoot amatan-amatan awal, banyaknya baris dan banyaknya kolom\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(country_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 195\nColumns: 35\n$ Country                                     <chr> \"Afghanistan\", \"Albania\", …\n$ `Density\\n(P/Km2)`                          <dbl> 60, 105, 18, 164, 26, 223,…\n$ Abbreviation                                <chr> \"AF\", \"AL\", \"DZ\", \"AD\", \"A…\n$ `Agricultural Land( %)`                     <chr> \"58.10%\", \"43.10%\", \"17.40…\n$ `Land Area(Km2)`                            <dbl> 652230, 28748, 2381741, 46…\n$ `Armed Forces size`                         <dbl> 323000, 9000, 317000, NA, …\n$ `Birth Rate`                                <dbl> 32.49, 11.78, 24.28, 7.20,…\n$ `Calling Code`                              <dbl> 93, 355, 213, 376, 244, 1,…\n$ `Capital/Major City`                        <chr> \"Kabul\", \"Tirana\", \"Algier…\n$ `Co2-Emissions`                             <dbl> 8672, 4536, 150006, 469, 3…\n$ CPI                                         <dbl> 149.90, 119.05, 151.36, NA…\n$ `CPI Change (%)`                            <chr> \"2.30%\", \"1.40%\", \"2.00%\",…\n$ `Currency-Code`                             <chr> \"AFN\", \"ALL\", \"DZD\", \"EUR\"…\n$ `Fertility Rate`                            <dbl> 4.47, 1.62, 3.02, 1.27, 5.…\n$ `Forested Area (%)`                         <chr> \"2.10%\", \"28.10%\", \"0.80%\"…\n$ `Gasoline Price`                            <chr> \"$0.70\", \"$1.36\", \"$0.28\",…\n$ GDP                                         <chr> \"$19,101,353,833\", \"$15,27…\n$ `Gross primary education enrollment (%)`    <chr> \"104.00%\", \"107.00%\", \"109…\n$ `Gross tertiary education enrollment (%)`   <chr> \"9.70%\", \"55.00%\", \"51.40%…\n$ `Infant mortality`                          <dbl> 47.9, 7.8, 20.1, 2.7, 51.6…\n$ `Largest city`                              <chr> \"Kabul\", \"Tirana\", \"Algier…\n$ `Life expectancy`                           <dbl> 64.5, 78.5, 76.7, NA, 60.8…\n$ `Maternal mortality ratio`                  <dbl> 638, 15, 112, NA, 241, 42,…\n$ `Minimum wage`                              <chr> \"$0.43\", \"$1.12\", \"$0.95\",…\n$ `Official language`                         <chr> \"Pashto\", \"Albanian\", \"Ara…\n$ `Out of pocket health expenditure`          <chr> \"78.40%\", \"56.90%\", \"28.10…\n$ `Physicians per thousand`                   <dbl> 0.28, 1.20, 1.72, 3.33, 0.…\n$ Population                                  <dbl> 38041754, 2854191, 4305305…\n$ `Population: Labor force participation (%)` <chr> \"48.90%\", \"55.70%\", \"41.20…\n$ `Tax revenue (%)`                           <chr> \"9.30%\", \"18.60%\", \"37.20%…\n$ `Total tax rate`                            <chr> \"71.40%\", \"36.60%\", \"66.10…\n$ `Unemployment rate`                         <chr> \"11.12%\", \"12.33%\", \"11.70…\n$ Urban_population                            <dbl> 9797273, 1747593, 31510100…\n$ Latitude                                    <dbl> 33.939110, 41.153332, 28.0…\n$ Longitude                                   <dbl> 67.709953, 20.168331, 1.65…\n```\n:::\n:::\n\n\n### Fungsi `select`\n\nFungsi `select` digunakan untuk menyeleksi kolom dari dataset yang ada\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(.data = country_data,Country,`Birth Rate`,Urban_population,GDP, `Gasoline Price`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 195 × 5\n   Country             `Birth Rate` Urban_population GDP        `Gasoline Price`\n   <chr>                      <dbl>            <dbl> <chr>      <chr>           \n 1 Afghanistan                 32.5          9797273 $19,101,3… $0.70           \n 2 Albania                     11.8          1747593 $15,278,0… $1.36           \n 3 Algeria                     24.3         31510100 $169,988,… $0.28           \n 4 Andorra                      7.2            67873 $3,154,05… $1.51           \n 5 Angola                      40.7         21061025 $94,635,4… $0.97           \n 6 Antigua and Barbuda         15.3            23800 $1,727,75… $0.99           \n 7 Argentina                   17.0         41339571 $449,663,… $1.10           \n 8 Armenia                     14.0          1869848 $13,672,8… $0.77           \n 9 Australia                   12.6         21844756 $1,392,68… $0.93           \n10 Austria                      9.7          5194416 $446,314,… $1.20           \n# ℹ 185 more rows\n```\n:::\n:::\n\n\nsintaks diatas dapat ditulis dalam bentuk lain yaitu\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country,`Birth Rate`,Urban_population,GDP, `Gasoline Price`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 195 × 5\n   Country             `Birth Rate` Urban_population GDP        `Gasoline Price`\n   <chr>                      <dbl>            <dbl> <chr>      <chr>           \n 1 Afghanistan                 32.5          9797273 $19,101,3… $0.70           \n 2 Albania                     11.8          1747593 $15,278,0… $1.36           \n 3 Algeria                     24.3         31510100 $169,988,… $0.28           \n 4 Andorra                      7.2            67873 $3,154,05… $1.51           \n 5 Angola                      40.7         21061025 $94,635,4… $0.97           \n 6 Antigua and Barbuda         15.3            23800 $1,727,75… $0.99           \n 7 Argentina                   17.0         41339571 $449,663,… $1.10           \n 8 Armenia                     14.0          1869848 $13,672,8… $0.77           \n 9 Australia                   12.6         21844756 $1,392,68… $0.93           \n10 Austria                      9.7          5194416 $446,314,… $1.20           \n# ℹ 185 more rows\n```\n:::\n:::\n\n\nHasil dari kedua sintaks tersebut sama. Simbol `%>%` dinamakan **pipe-operator**\n\n\n### Operator ` %>%`\n\nOperator `%>%` digunakan untuk mengantarkan kita dari step satu ke step yang lainnya. Misalnya saja sintkas dibawah ini\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(Urban_population < 10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  Country       Urban_population\n  <chr>                    <dbl>\n1 Liechtenstein             5464\n2 Tuvalu                    7362\n```\n:::\n:::\n\n\nSintaks diatas dapat dibaca sebagai berikut:\n* Step 1 menyiapkan objek data yaitu `country_data`\n* Step 2 memilih kolom `Country` dan `Urban_population` berdasarkan step 1\n* Step 3 menyaring `Urban_population < 10000` berdasarkan objek data pada step 2\n\n\nJika kita hilangkan step 3 maka sintaksnya akan menjadi seperti ini\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 195 × 2\n   Country             Urban_population\n   <chr>                          <dbl>\n 1 Afghanistan                  9797273\n 2 Albania                      1747593\n 3 Algeria                     31510100\n 4 Andorra                        67873\n 5 Angola                      21061025\n 6 Antigua and Barbuda            23800\n 7 Argentina                   41339571\n 8 Armenia                      1869848\n 9 Australia                   21844756\n10 Austria                      5194416\n# ℹ 185 more rows\n```\n:::\n:::\n\n\nOperator `%>%` juga memastikan bahwa objek data selalu berada di step 1. Kemudian, Operator `%>%` bisa dikeluarkan dengan shortcut keyboard `ctrl+shift+m` pada windows (macos menyesuaikan).\n\n\n### Fungsi `filter`\n\nfungsi `filter` digunakan untuk menyaring baris berdasarkan pernyataan logika tertentu. Pernyataan logika adalah suatu pernyataan yang menghasilkan `TRUE` atau `FALSE` dan biasanya menggunakan **operator logika** seperti `<`,`>`,`<=`,`>=`,`!=`, `&`,`|` dan `==`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(Urban_population == 1747593)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Country Urban_population\n  <chr>              <dbl>\n1 Albania          1747593\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(Urban_population > 1747593)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 132 × 2\n   Country     Urban_population\n   <chr>                  <dbl>\n 1 Afghanistan          9797273\n 2 Algeria             31510100\n 3 Angola              21061025\n 4 Argentina           41339571\n 5 Armenia              1869848\n 6 Australia           21844756\n 7 Austria              5194416\n 8 Azerbaijan           5616165\n 9 Bangladesh          60987417\n10 Belarus              7482982\n# ℹ 122 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(Country==\"Indonesia\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Country   Urban_population\n  <chr>                <dbl>\n1 Indonesia        151509724\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(Country%in%c(\"Indonesia\",\"Malaysia\",\"Thailand\",\"Singapore\",\"Papua\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  Country   Urban_population\n  <chr>                <dbl>\n1 Indonesia        151509724\n2 Malaysia          24475766\n3 Singapore          5703569\n4 Thailand          35294600\n```\n:::\n:::\n\n\n\nSelain menggunakan operator logika, kita bisa menggunakan fungsi `str_detect` dari package `stringr` untuk melakukan filtering jika kita tidak yakin dengan nama persis negaranya. Dalam sintaks sebelumnya dapat diperhatikan bahwa negara `Papua` tidak muncul karena mungkin nama `Papua` salah atau kurang lengkap. Berikut ilustrasi penggunaan `str_detect`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(str_detect(Country,\"Papua\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Country          Urban_population\n  <chr>                       <dbl>\n1 Papua New Guinea          1162834\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(str_detect(Country,\"Papua\")|str_detect(Country,\"Timor\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  Country          Urban_population\n  <chr>                       <dbl>\n1 Papua New Guinea          1162834\n2 East Timor                 400182\n```\n:::\n:::\n\n\n\n### Fungsi `arrange`\n\nFungsi `arrange` digunakan untuk mengurutkan kolom besar ke kecil atau sebaliknya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(Urban_population > 1747593 & Urban_population <= 6084994) %>% \n  arrange(Urban_population)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 2\n   Country                  Urban_population\n   <chr>                               <dbl>\n 1 Armenia                           1869848\n 2 Lithuania                         1891013\n 3 Gabon                             1949694\n 4 Central African Republic          1982064\n 5 Rwanda                            2186104\n 6 Georgia                           2196476\n 7 South Sudan                       2201250\n 8 Mongolia                          2210626\n 9 Croatia                           2328318\n10 Kyrgyzstan                        2362644\n# ℹ 40 more rows\n```\n:::\n:::\n\n\n jika ingin mengurutkan dari besar ke kecil cukup tambahkan `desc`\n \n \n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(Urban_population > 1747593 & Urban_population <= 6084994) %>% \n  arrange(desc(Urban_population))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 2\n   Country    Urban_population\n   <chr>                 <dbl>\n 1 Lebanon             6084994\n 2 Nepal               5765513\n 3 Singapore           5703569\n 4 Benin               5648149\n 5 Honduras            5626433\n 6 Azerbaijan          5616165\n 7 Libya               5448597\n 8 Bulgaria            5256027\n 9 Austria             5194416\n10 Denmark             5119978\n# ℹ 40 more rows\n```\n:::\n:::\n\n\nMengurutkan berdasarkan abjad \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population) %>% \n  filter(Urban_population > 1747593 & Urban_population <= 6084994) %>% \n  arrange(desc(Country))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 2\n   Country      Urban_population\n   <chr>                   <dbl>\n 1 Zimbabwe              4717305\n 2 Uruguay               3303394\n 3 Turkmenistan          3092738\n 4 Togo                  3414638\n 5 Tajikistan            2545477\n 6 Sri Lanka             4052088\n 7 South Sudan           2201250\n 8 Slovakia              2930419\n 9 Singapore             5703569\n10 Sierra Leone          3319366\n# ℹ 40 more rows\n```\n:::\n:::\n\n\n`arrange` juga bisa digunakan untuk melakukan pengurutan berdasarkan kriteria lebih dari satu kolom\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  select(Country, Urban_population,`Official language`) %>% \n  filter(Urban_population > 1747593 & Urban_population <= 6084994) %>% \n  arrange(`Official language`,desc(Urban_population))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 3\n   Country    Urban_population `Official language` \n   <chr>                 <dbl> <chr>               \n 1 Lebanon             6084994 Arabic              \n 2 Libya               5448597 Arabic              \n 3 Oman                4250777 Arabic              \n 4 Qatar               2809071 Arabic              \n 5 Mauritania          2466821 Arabic              \n 6 Armenia             1869848 Armenian            \n 7 Azerbaijan          5616165 Azerbaijani language\n 8 Bulgaria            5256027 Bulgarian           \n 9 Croatia             2328318 Croatian            \n10 Denmark             5119978 Danish              \n# ℹ 40 more rows\n```\n:::\n:::\n\n\n### Fungsi `mutate`\n\nFungsi `mutate` digunakan untuk membuat, memodifikasi dan menghapus kolom dari dataset.\n\n\nMisal kita ingin membuat kolom baru yakni kolom bernama `Persentase_urban_pop` yang berasal dari rumus sebagai berikut\n\n$$\n\\text{Persentase_urban_pop}= \\left( \\frac{\\text{Urban_population}}{\\text{Population}} \\right) \\times 100\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n    mutate(Persentase_urban_pop= (Urban_population*100) / Population)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 195 × 36\n   Country             `Density\\n(P/Km2)` Abbreviation `Agricultural Land( %)`\n   <chr>                            <dbl> <chr>        <chr>                  \n 1 Afghanistan                         60 AF           58.10%                 \n 2 Albania                            105 AL           43.10%                 \n 3 Algeria                             18 DZ           17.40%                 \n 4 Andorra                            164 AD           40.00%                 \n 5 Angola                              26 AO           47.50%                 \n 6 Antigua and Barbuda                223 AG           20.50%                 \n 7 Argentina                           17 AR           54.30%                 \n 8 Armenia                            104 AM           58.90%                 \n 9 Australia                            3 AU           48.20%                 \n10 Austria                            109 AT           32.40%                 \n# ℹ 185 more rows\n# ℹ 32 more variables: `Land Area(Km2)` <dbl>, `Armed Forces size` <dbl>,\n#   `Birth Rate` <dbl>, `Calling Code` <dbl>, `Capital/Major City` <chr>,\n#   `Co2-Emissions` <dbl>, CPI <dbl>, `CPI Change (%)` <chr>,\n#   `Currency-Code` <chr>, `Fertility Rate` <dbl>, `Forested Area (%)` <chr>,\n#   `Gasoline Price` <chr>, GDP <chr>,\n#   `Gross primary education enrollment (%)` <chr>, …\n```\n:::\n:::\n\n\nkarena agak sulit mengakses kolom barunya `Persentase_urban_pop` kita akan menyeleksi kolom-kolom yang berkepentingan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n    mutate(Persentase_urban_pop= (Urban_population*100) / Population) %>% \n    select(Country,Persentase_urban_pop,Population)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 195 × 3\n   Country             Persentase_urban_pop Population\n   <chr>                              <dbl>      <dbl>\n 1 Afghanistan                         25.8   38041754\n 2 Albania                             61.2    2854191\n 3 Algeria                             73.2   43053054\n 4 Andorra                             88.0      77142\n 5 Angola                              66.2   31825295\n 6 Antigua and Barbuda                 24.5      97118\n 7 Argentina                           92.0   44938712\n 8 Armenia                             63.2    2957731\n 9 Australia                           84.8   25766605\n10 Austria                             58.5    8877067\n# ℹ 185 more rows\n```\n:::\n:::\n\n\nKemudian kita bisa menghapus kolom dengan `mutate` dengan sintaks dibawah ini\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n    mutate(Persentase_urban_pop= (Urban_population*100) / Population) %>% \n    select(Country,Persentase_urban_pop,Population) %>% \n    mutate(Country=NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 195 × 2\n   Persentase_urban_pop Population\n                  <dbl>      <dbl>\n 1                 25.8   38041754\n 2                 61.2    2854191\n 3                 73.2   43053054\n 4                 88.0      77142\n 5                 66.2   31825295\n 6                 24.5      97118\n 7                 92.0   44938712\n 8                 63.2    2957731\n 9                 84.8   25766605\n10                 58.5    8877067\n# ℹ 185 more rows\n```\n:::\n:::\n\n\n\nIlustrasi selanjutnya adalah kita akan memodifikasi kolom yang sudah ada. Kolom `Country` kita modifikasi sedemikian sehingga nama negaranya jadi huruf kapital semua\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  mutate(Country=str_to_upper(Country))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 195 × 35\n   Country             `Density\\n(P/Km2)` Abbreviation `Agricultural Land( %)`\n   <chr>                            <dbl> <chr>        <chr>                  \n 1 AFGHANISTAN                         60 AF           58.10%                 \n 2 ALBANIA                            105 AL           43.10%                 \n 3 ALGERIA                             18 DZ           17.40%                 \n 4 ANDORRA                            164 AD           40.00%                 \n 5 ANGOLA                              26 AO           47.50%                 \n 6 ANTIGUA AND BARBUDA                223 AG           20.50%                 \n 7 ARGENTINA                           17 AR           54.30%                 \n 8 ARMENIA                            104 AM           58.90%                 \n 9 AUSTRALIA                            3 AU           48.20%                 \n10 AUSTRIA                            109 AT           32.40%                 \n# ℹ 185 more rows\n# ℹ 31 more variables: `Land Area(Km2)` <dbl>, `Armed Forces size` <dbl>,\n#   `Birth Rate` <dbl>, `Calling Code` <dbl>, `Capital/Major City` <chr>,\n#   `Co2-Emissions` <dbl>, CPI <dbl>, `CPI Change (%)` <chr>,\n#   `Currency-Code` <chr>, `Fertility Rate` <dbl>, `Forested Area (%)` <chr>,\n#   `Gasoline Price` <chr>, GDP <chr>,\n#   `Gross primary education enrollment (%)` <chr>, …\n```\n:::\n:::\n\n\nfungsi `str_to_upper` berasal dari package `stringr` yang berguna untuk konversi semua abjad menjadi kapital.\n\n\n\n### Agregasi data dengan `group_by` dan `summarize` \n\n\nFungsi `summerize` digunakan untuk merangkum banyak baris (amatan) menjadi satu baris, rangkuman ini bisa berupa `mean`, `median`,`variance`,`sd`(standar deviasi). Berikut illustrasinya\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>%\n  summarize(mean_populasi = mean(Population,na.rm = TRUE),\n            median_urban_populasi = median(Urban_population,na.rm = TRUE),\n            sd_populasi = sd(Population,na.rm=TRUE),\n            q1_urban_populasi = quantile(Urban_population,probs = 0.25,na.rm = TRUE)\n            )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  mean_populasi median_urban_populasi sd_populasi q1_urban_populasi\n          <dbl>                 <dbl>       <dbl>             <dbl>\n1     39381164.              4678104.  145092392.           1152961\n```\n:::\n:::\n\n\nKemudian kita bisa menghitung `mean` dari setiap kolom numeric dengan memanfaatkan fungsi `across`, dan `where`. Dalam konteks ini, Fungsi `across` digunakan untuk menerapkan perhitungan `mean` setiap kolom numeric. Sementara itu, fungsi `where` digunakan untuk memastikan bahwa kolom yang kita terapkan perhitungan sesuai dengan kondisi yang kita inginkan.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>%\n  summarize( across(where(is.numeric),mean) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 16\n  `Density\\n(P/Km2)` `Land Area(Km2)` `Armed Forces size` `Birth Rate`\n               <dbl>            <dbl>               <dbl>        <dbl>\n1               357.               NA                  NA           NA\n# ℹ 12 more variables: `Calling Code` <dbl>, `Co2-Emissions` <dbl>, CPI <dbl>,\n#   `Fertility Rate` <dbl>, `Infant mortality` <dbl>, `Life expectancy` <dbl>,\n#   `Maternal mortality ratio` <dbl>, `Physicians per thousand` <dbl>,\n#   Population <dbl>, Urban_population <dbl>, Latitude <dbl>, Longitude <dbl>\n```\n:::\n:::\n\n\njika kita ingin mengexclude `NA` dari perhitungan, perlu membuat **fungsi anonim** terlebih dahulu\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>%\n  summarize(across(where(is.numeric),function(x) mean(x,na.rm = TRUE) ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 16\n  `Density\\n(P/Km2)` `Land Area(Km2)` `Armed Forces size` `Birth Rate`\n               <dbl>            <dbl>               <dbl>        <dbl>\n1               357.          689624.             159275.         20.2\n# ℹ 12 more variables: `Calling Code` <dbl>, `Co2-Emissions` <dbl>, CPI <dbl>,\n#   `Fertility Rate` <dbl>, `Infant mortality` <dbl>, `Life expectancy` <dbl>,\n#   `Maternal mortality ratio` <dbl>, `Physicians per thousand` <dbl>,\n#   Population <dbl>, Urban_population <dbl>, Latitude <dbl>, Longitude <dbl>\n```\n:::\n:::\n\n\nSelanjutnya, jika kita ingin menambah nama kolom dengan kata `mean`, kita bisa memanfaatkan fungsi `rename_with`. Penambahan nama kolom ini dapat menggunakan fungsi `str_c`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>%\n  summarize(across(where(is.numeric),function(x) mean(x,na.rm = TRUE) )) %>% \n  rename_with(.fn = function(x) str_c(\"mean_\",x),.cols = everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 16\n  `mean_Density\\n(P/Km2)` `mean_Land Area(Km2)` `mean_Armed Forces size`\n                    <dbl>                 <dbl>                    <dbl>\n1                    357.               689624.                  159275.\n# ℹ 13 more variables: `mean_Birth Rate` <dbl>, `mean_Calling Code` <dbl>,\n#   `mean_Co2-Emissions` <dbl>, mean_CPI <dbl>, `mean_Fertility Rate` <dbl>,\n#   `mean_Infant mortality` <dbl>, `mean_Life expectancy` <dbl>,\n#   `mean_Maternal mortality ratio` <dbl>,\n#   `mean_Physicians per thousand` <dbl>, mean_Population <dbl>,\n#   mean_Urban_population <dbl>, mean_Latitude <dbl>, mean_Longitude <dbl>\n```\n:::\n:::\n\n\nFungsi `group_by` digunakan untuk melakukan manipulasi atau perhitungan pada dataset berdasarkan grup atau kelompok tertentu. Grup atau kelompok yang dimaksud biasanya berupa kategori-kategori yang tersimpan dalam satu kolom. Dalam penggunaannya, `group_by` ini dipasangkan dengan fungsi `summarize`.  Berikut adalah ilustrasinya\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>%\n  group_by(`Official language`) %>% \n  summarize(n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 78 × 2\n   `Official language`  `n()`\n   <chr>                <int>\n 1 Afrikaans                1\n 2 Albanian                 1\n 3 Amharic                  1\n 4 Arabic                  18\n 5 Armenian                 1\n 6 Azerbaijani language     1\n 7 Bengali                  1\n 8 Bosnian                  1\n 9 Bulgarian                1\n10 Burmese                  1\n# ℹ 68 more rows\n```\n:::\n:::\n\n\nFungsi `n()` digunakan untuk menghitung frequensi dari suatu nilai atau kategori.\n\n\nSintaks diatas bisa ditulis dengan bentuk lain seperti dibawah ini\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>%\n  count(`Official language`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 78 × 2\n   `Official language`      n\n   <chr>                <int>\n 1 Afrikaans                1\n 2 Albanian                 1\n 3 Amharic                  1\n 4 Arabic                  18\n 5 Armenian                 1\n 6 Azerbaijani language     1\n 7 Bengali                  1\n 8 Bosnian                  1\n 9 Bulgarian                1\n10 Burmese                  1\n# ℹ 68 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  mutate(pop_status = case_when(Population < 15000000 ~ \"small\",\n                                Population >= 15000000 & Population < 39381164 ~ \"medium\",\n                                Population >= 39381164\t~ \"large\"\n                                )) %>% \n  count(pop_status,`Official language`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 3\n   pop_status `Official language`     n\n   <chr>      <chr>               <int>\n 1 large      Afrikaans               1\n 2 large      Amharic                 1\n 3 large      Arabic                  2\n 4 large      Bengali                 1\n 5 large      Burmese                 1\n 6 large      English                 3\n 7 large      French                  2\n 8 large      German                  1\n 9 large      Hindi                   1\n10 large      Indonesian              1\n# ℹ 90 more rows\n```\n:::\n:::\n\n\n\n### Fungsi `pivot_longer` dan `pivot_wider`\n\n\nFungsi `pivot_longer` digunakan untuk mentransformasi dataset yang berbentuk wide ke dataset yang berbentuk long. Sebaliknya `pivot_wider` digunakan untuk mentransformasi dataset yang berbentuk long ke dataset yang berbentuk wide. Kedua fungsi ini berasal dari package `tidyr`. \n\n\n![](wideLongdata.png)\n\n\nBerikut adalah ilustrasinya\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## bentuk wide\ncountry_data %>%\n  summarize(across(where(is.numeric),function(x) mean(x,na.rm = TRUE) )) %>% \n  select(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 10\n  `Density\\n(P/Km2)` `Land Area(Km2)` `Armed Forces size` `Birth Rate`\n               <dbl>            <dbl>               <dbl>        <dbl>\n1               357.          689624.             159275.         20.2\n# ℹ 6 more variables: `Calling Code` <dbl>, `Co2-Emissions` <dbl>, CPI <dbl>,\n#   `Fertility Rate` <dbl>, `Infant mortality` <dbl>, `Life expectancy` <dbl>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>%\n  summarize(across(where(is.numeric),function(x) mean(x,na.rm = TRUE) )) %>% \n  select(1:10) %>% \n  pivot_longer(cols = everything(),\n               names_to = \"Variable\",\n               values_to = \"mean\"  \n               )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   Variable                 mean\n   <chr>                   <dbl>\n 1 \"Density\\n(P/Km2)\"     357.  \n 2 \"Land Area(Km2)\"    689624.  \n 3 \"Armed Forces size\" 159275.  \n 4 \"Birth Rate\"            20.2 \n 5 \"Calling Code\"         361.  \n 6 \"Co2-Emissions\"     177799.  \n 7 \"CPI\"                  190.  \n 8 \"Fertility Rate\"         2.70\n 9 \"Infant mortality\"      21.3 \n10 \"Life expectancy\"       72.3 \n```\n:::\n:::\n\n\nArgument `names_to` berguna untuk membuat kolom untuk menaruh nama-nama kolom sebelum transformasi, sementara `values_to` berguna untuk membuat kolom untuk menaruh nilai-nilai data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bentuk long\ncountry_data %>% \n  mutate(pop_status = case_when(Population < 15000000 ~ \"small\",\n                                Population >= 15000000 & Population < 39381164 ~ \"medium\",\n                                Population >= 39381164\t~ \"large\"\n                                )) %>% \n  count(pop_status,`Official language`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 3\n   pop_status `Official language`     n\n   <chr>      <chr>               <int>\n 1 large      Afrikaans               1\n 2 large      Amharic                 1\n 3 large      Arabic                  2\n 4 large      Bengali                 1\n 5 large      Burmese                 1\n 6 large      English                 3\n 7 large      French                  2\n 8 large      German                  1\n 9 large      Hindi                   1\n10 large      Indonesian              1\n# ℹ 90 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_data %>% \n  mutate(pop_status = case_when(Population < 15000000 ~ \"small\",\n                                Population >= 15000000 & Population < 39381164 ~ \"medium\",\n                                Population >= 39381164\t~ \"large\"\n                                )) %>% \n  count(pop_status,`Official language`) %>% \n  pivot_wider(id_cols = `Official language`,\n              names_from = pop_status,\n              values_from = n\n              )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 78 × 5\n   `Official language` large medium small  `NA`\n   <chr>               <int>  <int> <int> <int>\n 1 Afrikaans               1     NA    NA    NA\n 2 Amharic                 1     NA    NA    NA\n 3 Arabic                  2      6     9     1\n 4 Bengali                 1     NA    NA    NA\n 5 Burmese                 1     NA    NA    NA\n 6 English                 3      3    25    NA\n 7 French                  2      9    14    NA\n 8 German                  1     NA     3    NA\n 9 Hindi                   1     NA    NA    NA\n10 Indonesian              1     NA    NA    NA\n# ℹ 68 more rows\n```\n:::\n:::\n\n\n\nArgument `names_from` berguna untuk membuat kolom-kolom berdasarkan **satu kolom** sebelum transformasi, sementara `values_to` berguna untuk membuat menaruh nilai-nilai data. Argument `id_cols` berguna untuk medefinisikan kolom-kolom yang kita anggap sebagai id.\n\n\n## Menyimpan hasil manipulasi data dalam objek R\n\n\nIlustrasi-ilustrasi sebelumnya tidak menyimpan data hasil manipulasi kita dalam objek R sehingga tidak bisa digunakan secara berulang. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tidak disimpan\ncountry_data %>% \n  mutate(pop_status = case_when(Population < 15000000 ~ \"small\",\n                                Population >= 15000000 & Population < 39381164 ~ \"medium\",\n                                Population >= 39381164\t~ \"large\"\n                                )) %>% \n  count(pop_status,`Official language`) %>% \n  pivot_wider(id_cols = `Official language`,\n              names_from = pop_status,\n              values_from = n\n              )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 78 × 5\n   `Official language` large medium small  `NA`\n   <chr>               <int>  <int> <int> <int>\n 1 Afrikaans               1     NA    NA    NA\n 2 Amharic                 1     NA    NA    NA\n 3 Arabic                  2      6     9     1\n 4 Bengali                 1     NA    NA    NA\n 5 Burmese                 1     NA    NA    NA\n 6 English                 3      3    25    NA\n 7 French                  2      9    14    NA\n 8 German                  1     NA     3    NA\n 9 Hindi                   1     NA    NA    NA\n10 Indonesian              1     NA    NA    NA\n# ℹ 68 more rows\n```\n:::\n:::\n\n\nberikut ilustrasi menyimpan data hasil manipulasi ke objek R dengan nama `tabel_baru`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabel_baru <- country_data %>% \n  mutate(pop_status = case_when(Population < 15000000 ~ \"small\",\n                                Population >= 15000000 & Population < 39381164 ~ \"medium\",\n                                Population >= 39381164\t~ \"large\"\n                                )) %>% \n  count(pop_status,`Official language`) %>% \n  pivot_wider(id_cols = `Official language`,\n              names_from = pop_status,\n              values_from = n\n              )\n```\n:::\n\n\n\nkemudian jika kita ingin mengeluarkan hasil manipulasi data, hanya perlu menuliskan nama objeknya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabel_baru\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 78 × 5\n   `Official language` large medium small  `NA`\n   <chr>               <int>  <int> <int> <int>\n 1 Afrikaans               1     NA    NA    NA\n 2 Amharic                 1     NA    NA    NA\n 3 Arabic                  2      6     9     1\n 4 Bengali                 1     NA    NA    NA\n 5 Burmese                 1     NA    NA    NA\n 6 English                 3      3    25    NA\n 7 French                  2      9    14    NA\n 8 German                  1     NA     3    NA\n 9 Hindi                   1     NA    NA    NA\n10 Indonesian              1     NA    NA    NA\n# ℹ 68 more rows\n```\n:::\n:::\n\n\n## Latihan Mandiri\n\nSoal-soal latihan mandiri ini didasarkan pada ***Global Country Information Dataset** dan sintaks yang digunakan **harus** mengutamakan sintaks yang berasal dari pacakge-package yang ada di dalam `tidyverse`.\n\n1. Tampilkan 10 negara yang memiliki `Armed Forces size` terbesar didunia. Hasil tampilannya harus terdiri dari dua kolom saja. (hint: gunakan fungsi `slice_max`)\n2. Negara mana saja yang `Fertility Rate`-nya lebih kecil dibandingkan Indonesia? Urutkan dari `Fertility Rate` besar ke kecil. Hasil tampilannya harus terdiri dari dua kolom saja.\n3. Hitunglah Statistika 5 serangkai dari kolom `Armed Forces size` dan `Fertility Rate`. Tampilkan hasilnya dengan format data long.\n4. Tunjukkan 5 Nilai mata uang (`Currency-Code`) yang paling banyak digunakan di dunia!\n5. Diantara negara-negara yang tergabung dalam ASEAN, tunjukkan 3 negara yang miliki `Infant mortality` tertinggi dan 3 negara yang memiliki `Infant mortality` terendah.\n\n\n\n## Tugas Kelompok\n\nTugas kelompok ini didasarkan pada ***Global Country Information Dataset** dan sintaks yang digunakan **harus** mengutamakan sintaks yang berasal dari pacakge-package yang ada di dalam `tidyverse`.\n\n1. Dalam R missing data biasanya ditandai dengan `NA`, hitung berapa banyak missing value yang ada pada dataset!\n2. Hapus semua missing data dan tunjukkan bahwa semua missing data sudah terhapus!\n3. Dalam dataset tersebut terdapat beberapa kolom yang berbentuk persentase dan nilai mata uang dollar US yang bertipe data `chr`. Gunakan fungsi `mutate` dan `across` untuk mengubah tipe data kolom tersebut menjadi `dbl`. Tunjukkan hasilnya dengan fungsi `glimpse`!\n4. Konversi nilai mata uang dalam bentuk dollar ke nilai mata uang Rupiah dengan tipe data `dbl`!\n5. Buatlah kolom `country_status` yang berisi kategori `\"rich\"`,`\"developing\"`, `\"poor\"`. Kategori ini didapatkan dengan kriteria sebagai berikut: jika `Unemployment rate` kurang dari 1% maka negara tersebut merupakan negara `\"rich\"`, jika `Unemployment rate` lebih besar dari 0.999999% dan kurang dari 5% maka negara tersebut merupakan negara `\"developing\"`. Kemudian jika `Unemployment rate` lebih besar dari 4.999999% maka negara tersebut merupakan negara`\"poor\"`. \n6. Hitunglah rata-rata dan nilai maximum `GDP` dan `CPI` berdasarkan `country status`! Kemudian hitung juga berapa banyak negara yang termasuk dalam kategori `\"rich\"`,`\"developing\"`, `\"poor\"`.\n7. Tampilkan hasil nomor 6 dalam format long!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}